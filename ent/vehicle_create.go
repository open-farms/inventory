// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-farms/inventory/ent/location"
	"github.com/open-farms/inventory/ent/vehicle"
)

// VehicleCreate is the builder for creating a Vehicle entity.
type VehicleCreate struct {
	config
	mutation *VehicleMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (vc *VehicleCreate) SetCreateTime(t time.Time) *VehicleCreate {
	vc.mutation.SetCreateTime(t)
	return vc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (vc *VehicleCreate) SetNillableCreateTime(t *time.Time) *VehicleCreate {
	if t != nil {
		vc.SetCreateTime(*t)
	}
	return vc
}

// SetUpdateTime sets the "update_time" field.
func (vc *VehicleCreate) SetUpdateTime(t time.Time) *VehicleCreate {
	vc.mutation.SetUpdateTime(t)
	return vc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (vc *VehicleCreate) SetNillableUpdateTime(t *time.Time) *VehicleCreate {
	if t != nil {
		vc.SetUpdateTime(*t)
	}
	return vc
}

// SetMake sets the "make" field.
func (vc *VehicleCreate) SetMake(s string) *VehicleCreate {
	vc.mutation.SetMake(s)
	return vc
}

// SetModel sets the "model" field.
func (vc *VehicleCreate) SetModel(s string) *VehicleCreate {
	vc.mutation.SetModel(s)
	return vc
}

// SetHours sets the "hours" field.
func (vc *VehicleCreate) SetHours(i int64) *VehicleCreate {
	vc.mutation.SetHours(i)
	return vc
}

// SetNillableHours sets the "hours" field if the given value is not nil.
func (vc *VehicleCreate) SetNillableHours(i *int64) *VehicleCreate {
	if i != nil {
		vc.SetHours(*i)
	}
	return vc
}

// SetYear sets the "year" field.
func (vc *VehicleCreate) SetYear(s string) *VehicleCreate {
	vc.mutation.SetYear(s)
	return vc
}

// SetNillableYear sets the "year" field if the given value is not nil.
func (vc *VehicleCreate) SetNillableYear(s *string) *VehicleCreate {
	if s != nil {
		vc.SetYear(*s)
	}
	return vc
}

// SetActive sets the "active" field.
func (vc *VehicleCreate) SetActive(b bool) *VehicleCreate {
	vc.mutation.SetActive(b)
	return vc
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (vc *VehicleCreate) SetNillableActive(b *bool) *VehicleCreate {
	if b != nil {
		vc.SetActive(*b)
	}
	return vc
}

// SetPower sets the "power" field.
func (vc *VehicleCreate) SetPower(s string) *VehicleCreate {
	vc.mutation.SetPower(s)
	return vc
}

// SetNillablePower sets the "power" field if the given value is not nil.
func (vc *VehicleCreate) SetNillablePower(s *string) *VehicleCreate {
	if s != nil {
		vc.SetPower(*s)
	}
	return vc
}

// SetLocationID sets the "location" edge to the Location entity by ID.
func (vc *VehicleCreate) SetLocationID(id int) *VehicleCreate {
	vc.mutation.SetLocationID(id)
	return vc
}

// SetLocation sets the "location" edge to the Location entity.
func (vc *VehicleCreate) SetLocation(l *Location) *VehicleCreate {
	return vc.SetLocationID(l.ID)
}

// Mutation returns the VehicleMutation object of the builder.
func (vc *VehicleCreate) Mutation() *VehicleMutation {
	return vc.mutation
}

// Save creates the Vehicle in the database.
func (vc *VehicleCreate) Save(ctx context.Context) (*Vehicle, error) {
	var (
		err  error
		node *Vehicle
	)
	vc.defaults()
	if len(vc.hooks) == 0 {
		if err = vc.check(); err != nil {
			return nil, err
		}
		node, err = vc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VehicleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = vc.check(); err != nil {
				return nil, err
			}
			vc.mutation = mutation
			if node, err = vc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(vc.hooks) - 1; i >= 0; i-- {
			if vc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = vc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (vc *VehicleCreate) SaveX(ctx context.Context) *Vehicle {
	v, err := vc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vc *VehicleCreate) Exec(ctx context.Context) error {
	_, err := vc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vc *VehicleCreate) ExecX(ctx context.Context) {
	if err := vc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vc *VehicleCreate) defaults() {
	if _, ok := vc.mutation.CreateTime(); !ok {
		v := vehicle.DefaultCreateTime()
		vc.mutation.SetCreateTime(v)
	}
	if _, ok := vc.mutation.UpdateTime(); !ok {
		v := vehicle.DefaultUpdateTime()
		vc.mutation.SetUpdateTime(v)
	}
	if _, ok := vc.mutation.Hours(); !ok {
		v := vehicle.DefaultHours
		vc.mutation.SetHours(v)
	}
	if _, ok := vc.mutation.Active(); !ok {
		v := vehicle.DefaultActive
		vc.mutation.SetActive(v)
	}
	if _, ok := vc.mutation.Power(); !ok {
		v := vehicle.DefaultPower
		vc.mutation.SetPower(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vc *VehicleCreate) check() error {
	if _, ok := vc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "create_time"`)}
	}
	if _, ok := vc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "update_time"`)}
	}
	if _, ok := vc.mutation.Make(); !ok {
		return &ValidationError{Name: "make", err: errors.New(`ent: missing required field "make"`)}
	}
	if _, ok := vc.mutation.Model(); !ok {
		return &ValidationError{Name: "model", err: errors.New(`ent: missing required field "model"`)}
	}
	if _, ok := vc.mutation.Hours(); !ok {
		return &ValidationError{Name: "hours", err: errors.New(`ent: missing required field "hours"`)}
	}
	if v, ok := vc.mutation.Hours(); ok {
		if err := vehicle.HoursValidator(v); err != nil {
			return &ValidationError{Name: "hours", err: fmt.Errorf(`ent: validator failed for field "hours": %w`, err)}
		}
	}
	if _, ok := vc.mutation.Active(); !ok {
		return &ValidationError{Name: "active", err: errors.New(`ent: missing required field "active"`)}
	}
	if v, ok := vc.mutation.Power(); ok {
		if err := vehicle.PowerValidator(v); err != nil {
			return &ValidationError{Name: "power", err: fmt.Errorf(`ent: validator failed for field "power": %w`, err)}
		}
	}
	if _, ok := vc.mutation.LocationID(); !ok {
		return &ValidationError{Name: "location", err: errors.New("ent: missing required edge \"location\"")}
	}
	return nil
}

func (vc *VehicleCreate) sqlSave(ctx context.Context) (*Vehicle, error) {
	_node, _spec := vc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (vc *VehicleCreate) createSpec() (*Vehicle, *sqlgraph.CreateSpec) {
	var (
		_node = &Vehicle{config: vc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: vehicle.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: vehicle.FieldID,
			},
		}
	)
	if value, ok := vc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: vehicle.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := vc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: vehicle.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := vc.mutation.Make(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehicle.FieldMake,
		})
		_node.Make = value
	}
	if value, ok := vc.mutation.Model(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehicle.FieldModel,
		})
		_node.Model = value
	}
	if value, ok := vc.mutation.Hours(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: vehicle.FieldHours,
		})
		_node.Hours = value
	}
	if value, ok := vc.mutation.Year(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehicle.FieldYear,
		})
		_node.Year = value
	}
	if value, ok := vc.mutation.Active(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: vehicle.FieldActive,
		})
		_node.Active = value
	}
	if value, ok := vc.mutation.Power(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehicle.FieldPower,
		})
		_node.Power = value
	}
	if nodes := vc.mutation.LocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vehicle.LocationTable,
			Columns: []string{vehicle.LocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: location.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.location_vehicle = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// VehicleCreateBulk is the builder for creating many Vehicle entities in bulk.
type VehicleCreateBulk struct {
	config
	builders []*VehicleCreate
}

// Save creates the Vehicle entities in the database.
func (vcb *VehicleCreateBulk) Save(ctx context.Context) ([]*Vehicle, error) {
	specs := make([]*sqlgraph.CreateSpec, len(vcb.builders))
	nodes := make([]*Vehicle, len(vcb.builders))
	mutators := make([]Mutator, len(vcb.builders))
	for i := range vcb.builders {
		func(i int, root context.Context) {
			builder := vcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VehicleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vcb *VehicleCreateBulk) SaveX(ctx context.Context) []*Vehicle {
	v, err := vcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vcb *VehicleCreateBulk) Exec(ctx context.Context) error {
	_, err := vcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vcb *VehicleCreateBulk) ExecX(ctx context.Context) {
	if err := vcb.Exec(ctx); err != nil {
		panic(err)
	}
}
