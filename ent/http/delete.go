// Code generated by entc, DO NOT EDIT.

package http

import (
	"net/http"
	"strconv"

	"github.com/go-chi/chi/v5"
	"github.com/open-farms/inventory/ent"
	"go.uber.org/zap"
)

// Delete removes a ent.Equipment from the database.
func (h EquipmentHandler) Delete(w http.ResponseWriter, r *http.Request) {
	l := h.log.With(zap.String("method", "Delete"))
	// ID is URL parameter.
	id64, err := strconv.ParseInt(chi.URLParam(r, "id"), 10, 0)
	if err != nil {
		l.Error("error getting id from url parameter", zap.String("id", chi.URLParam(r, "id")), zap.Error(err))
		BadRequest(w, "id must be an integer greater zero")
		return
	}
	id := int64(id64)
	err = h.client.Equipment.DeleteOneID(id).Exec(r.Context())
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			msg := stripEntError(err)
			l.Info(msg, zap.Error(err), zap.Int64("id", id))
			NotFound(w, msg)
		default:
			l.Error("could-not-delete-equipment", zap.Error(err), zap.Int64("id", id))
			InternalServerError(w, nil)
		}
		return
	}
	l.Info("equipment deleted", zap.Int64("id", id))
	w.WriteHeader(http.StatusNoContent)
}

// Delete removes a ent.Vehicle from the database.
func (h VehicleHandler) Delete(w http.ResponseWriter, r *http.Request) {
	l := h.log.With(zap.String("method", "Delete"))
	// ID is URL parameter.
	id64, err := strconv.ParseInt(chi.URLParam(r, "id"), 10, 0)
	if err != nil {
		l.Error("error getting id from url parameter", zap.String("id", chi.URLParam(r, "id")), zap.Error(err))
		BadRequest(w, "id must be an integer greater zero")
		return
	}
	id := int64(id64)
	err = h.client.Vehicle.DeleteOneID(id).Exec(r.Context())
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			msg := stripEntError(err)
			l.Info(msg, zap.Error(err), zap.Int64("id", id))
			NotFound(w, msg)
		default:
			l.Error("could-not-delete-vehicle", zap.Error(err), zap.Int64("id", id))
			InternalServerError(w, nil)
		}
		return
	}
	l.Info("vehicle deleted", zap.Int64("id", id))
	w.WriteHeader(http.StatusNoContent)
}
