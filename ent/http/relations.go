// Code generated by entc, DO NOT EDIT.

package http

import (
	"net/http"
	"strconv"

	"github.com/go-chi/chi/v5"
	"github.com/mailru/easyjson"
	"github.com/open-farms/inventory/ent"
	"github.com/open-farms/inventory/ent/location"
	"github.com/open-farms/inventory/ent/vehicle"
	"go.uber.org/zap"
)

// Vehicle fetches the ent.vehicle attached to the ent.Location
// identified by a given url-parameter from the database and renders it to the client.
func (h LocationHandler) Vehicle(w http.ResponseWriter, r *http.Request) {
	l := h.log.With(zap.String("method", "Vehicle"))
	// ID is URL parameter.
	id, err := strconv.Atoi(chi.URLParam(r, "id"))
	if err != nil {
		l.Error("error getting id from url parameter", zap.String("id", chi.URLParam(r, "id")), zap.Error(err))
		BadRequest(w, "id must be an integer")
		return
	}
	// Create the query to fetch the vehicle attached to this location
	q := h.client.Location.Query().Where(location.ID(id)).QueryVehicle()
	page := 1
	if d := r.URL.Query().Get("page"); d != "" {
		page, err = strconv.Atoi(d)
		if err != nil {
			l.Info("error parsing query parameter 'page'", zap.String("page", d), zap.Error(err))
			BadRequest(w, "page must be an integer greater zero")
			return
		}
	}
	itemsPerPage := 30
	if d := r.URL.Query().Get("itemsPerPage"); d != "" {
		itemsPerPage, err = strconv.Atoi(d)
		if err != nil {
			l.Info("error parsing query parameter 'itemsPerPage'", zap.String("itemsPerPage", d), zap.Error(err))
			BadRequest(w, "itemsPerPage must be an integer greater zero")
			return
		}
	}
	es, err := q.Limit(itemsPerPage).Offset((page - 1) * itemsPerPage).All(r.Context())
	if err != nil {
		l.Error("error fetching vehicles from db", zap.Error(err))
		InternalServerError(w, nil)
		return
	}
	l.Info("vehicles rendered", zap.Int("amount", len(es)))
	easyjson.MarshalToHTTPResponseWriter(NewVehicle1702989761Views(es), w)
}

// Location fetches the ent.location attached to the ent.Vehicle
// identified by a given url-parameter from the database and renders it to the client.
func (h VehicleHandler) Location(w http.ResponseWriter, r *http.Request) {
	l := h.log.With(zap.String("method", "Location"))
	// ID is URL parameter.
	id, err := strconv.Atoi(chi.URLParam(r, "id"))
	if err != nil {
		l.Error("error getting id from url parameter", zap.String("id", chi.URLParam(r, "id")), zap.Error(err))
		BadRequest(w, "id must be an integer")
		return
	}
	// Create the query to fetch the location attached to this vehicle
	q := h.client.Vehicle.Query().Where(vehicle.ID(id)).QueryLocation()
	e, err := q.Only(r.Context())
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			msg := stripEntError(err)
			l.Info(msg, zap.Error(err), zap.Int("id", id))
			NotFound(w, msg)
		case ent.IsNotSingular(err):
			msg := stripEntError(err)
			l.Error(msg, zap.Error(err), zap.Int("id", id))
			BadRequest(w, msg)
		default:
			l.Error("could-not-read-vehicle", zap.Error(err), zap.Int("id", id))
			InternalServerError(w, nil)
		}
		return
	}
	l.Info("location rendered", zap.Int("id", e.ID))
	easyjson.MarshalToHTTPResponseWriter(NewLocation948740745View(e), w)
}
