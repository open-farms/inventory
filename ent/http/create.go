// Code generated by entc, DO NOT EDIT.

package http

import (
	"net/http"

	"github.com/mailru/easyjson"
	"github.com/open-farms/inventory/ent"
	"github.com/open-farms/inventory/ent/equipment"
	"github.com/open-farms/inventory/ent/vehicle"
	"go.uber.org/zap"
)

// Create creates a new ent.Equipment and stores it in the database.
func (h EquipmentHandler) Create(w http.ResponseWriter, r *http.Request) {
	l := h.log.With(zap.String("method", "Create"))
	// Get the post data.
	var d EquipmentCreateRequest
	if err := easyjson.UnmarshalFromReader(r.Body, &d); err != nil {
		l.Error("error decoding json", zap.Error(err))
		BadRequest(w, "invalid json string")
		return
	}
	// Save the data.
	b := h.client.Equipment.Create()
	if d.Name != nil {
		b.SetName(*d.Name)
	}
	if d.Condition != nil {
		b.SetCondition(*d.Condition)
	}
	if d.CreateTime != nil {
		b.SetCreateTime(*d.CreateTime)
	}
	if d.UpdateTime != nil {
		b.SetUpdateTime(*d.UpdateTime)
	}
	e, err := b.Save(r.Context())
	if err != nil {
		switch {
		default:
			l.Error("could not create equipment", zap.Error(err))
			InternalServerError(w, nil)
		}
		return
	}
	// Store id of fresh entity to log errors for the reload.
	id := e.ID
	// Reload entry.
	q := h.client.Equipment.Query().Where(equipment.ID(e.ID))
	ret, err := q.Only(r.Context())
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			msg := stripEntError(err)
			l.Info(msg, zap.Error(err), zap.Int("id", id))
			NotFound(w, msg)
		case ent.IsNotSingular(err):
			msg := stripEntError(err)
			l.Error(msg, zap.Error(err), zap.Int("id", id))
			BadRequest(w, msg)
		default:
			l.Error("could not read equipment", zap.Error(err), zap.Int("id", id))
			InternalServerError(w, nil)
		}
		return
	}
	l.Info("equipment rendered", zap.Int("id", id))
	easyjson.MarshalToHTTPResponseWriter(NewEquipment822375389View(ret), w)
}

// Create creates a new ent.Vehicle and stores it in the database.
func (h VehicleHandler) Create(w http.ResponseWriter, r *http.Request) {
	l := h.log.With(zap.String("method", "Create"))
	// Get the post data.
	var d VehicleCreateRequest
	if err := easyjson.UnmarshalFromReader(r.Body, &d); err != nil {
		l.Error("error decoding json", zap.Error(err))
		BadRequest(w, "invalid json string")
		return
	}
	// Save the data.
	b := h.client.Vehicle.Create()
	if d.Make != nil {
		b.SetMake(*d.Make)
	}
	if d.Model != nil {
		b.SetModel(*d.Model)
	}
	if d.Miles != nil {
		b.SetMiles(*d.Miles)
	}
	if d.Mpg != nil {
		b.SetMpg(*d.Mpg)
	}
	if d.Owner != nil {
		b.SetOwner(*d.Owner)
	}
	if d.Year != nil {
		b.SetYear(*d.Year)
	}
	if d.Active != nil {
		b.SetActive(*d.Active)
	}
	if d.Tags != nil {
		b.SetTags(*d.Tags)
	}
	if d.Condition != nil {
		b.SetCondition(*d.Condition)
	}
	if d.CreateTime != nil {
		b.SetCreateTime(*d.CreateTime)
	}
	if d.UpdateTime != nil {
		b.SetUpdateTime(*d.UpdateTime)
	}
	e, err := b.Save(r.Context())
	if err != nil {
		switch {
		default:
			l.Error("could not create vehicle", zap.Error(err))
			InternalServerError(w, nil)
		}
		return
	}
	// Store id of fresh entity to log errors for the reload.
	id := e.ID
	// Reload entry.
	q := h.client.Vehicle.Query().Where(vehicle.ID(e.ID))
	ret, err := q.Only(r.Context())
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			msg := stripEntError(err)
			l.Info(msg, zap.Error(err), zap.Int64("id", id))
			NotFound(w, msg)
		case ent.IsNotSingular(err):
			msg := stripEntError(err)
			l.Error(msg, zap.Error(err), zap.Int64("id", id))
			BadRequest(w, msg)
		default:
			l.Error("could not read vehicle", zap.Error(err), zap.Int64("id", id))
			InternalServerError(w, nil)
		}
		return
	}
	l.Info("vehicle rendered", zap.Int64("id", id))
	easyjson.MarshalToHTTPResponseWriter(NewVehicle2848838632View(ret), w)
}
