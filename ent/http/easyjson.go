// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package http

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonC5a4559bDecodeGithubComOpenFarmsInventoryEntHttp(in *jlexer.Lexer, out *VehicleUpdateRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "create_time":
			if in.IsNull() {
				in.Skip()
				out.CreateTime = nil
			} else {
				if out.CreateTime == nil {
					out.CreateTime = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.CreateTime).UnmarshalJSON(data))
				}
			}
		case "update_time":
			if in.IsNull() {
				in.Skip()
				out.UpdateTime = nil
			} else {
				if out.UpdateTime == nil {
					out.UpdateTime = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.UpdateTime).UnmarshalJSON(data))
				}
			}
		case "make":
			if in.IsNull() {
				in.Skip()
				out.Make = nil
			} else {
				if out.Make == nil {
					out.Make = new(string)
				}
				*out.Make = string(in.String())
			}
		case "model":
			if in.IsNull() {
				in.Skip()
				out.Model = nil
			} else {
				if out.Model == nil {
					out.Model = new(string)
				}
				*out.Model = string(in.String())
			}
		case "hours":
			if in.IsNull() {
				in.Skip()
				out.Hours = nil
			} else {
				if out.Hours == nil {
					out.Hours = new(int64)
				}
				*out.Hours = int64(in.Int64())
			}
		case "year":
			if in.IsNull() {
				in.Skip()
				out.Year = nil
			} else {
				if out.Year == nil {
					out.Year = new(string)
				}
				*out.Year = string(in.String())
			}
		case "active":
			if in.IsNull() {
				in.Skip()
				out.Active = nil
			} else {
				if out.Active == nil {
					out.Active = new(bool)
				}
				*out.Active = bool(in.Bool())
			}
		case "power":
			if in.IsNull() {
				in.Skip()
				out.Power = nil
			} else {
				if out.Power == nil {
					out.Power = new(string)
				}
				*out.Power = string(in.String())
			}
		case "location":
			if in.IsNull() {
				in.Skip()
				out.Location = nil
			} else {
				if out.Location == nil {
					out.Location = new(int)
				}
				*out.Location = int(in.Int())
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComOpenFarmsInventoryEntHttp(out *jwriter.Writer, in VehicleUpdateRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"create_time\":"
		out.RawString(prefix[1:])
		if in.CreateTime == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.CreateTime).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"update_time\":"
		out.RawString(prefix)
		if in.UpdateTime == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.UpdateTime).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"make\":"
		out.RawString(prefix)
		if in.Make == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Make))
		}
	}
	{
		const prefix string = ",\"model\":"
		out.RawString(prefix)
		if in.Model == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Model))
		}
	}
	{
		const prefix string = ",\"hours\":"
		out.RawString(prefix)
		if in.Hours == nil {
			out.RawString("null")
		} else {
			out.Int64(int64(*in.Hours))
		}
	}
	{
		const prefix string = ",\"year\":"
		out.RawString(prefix)
		if in.Year == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Year))
		}
	}
	{
		const prefix string = ",\"active\":"
		out.RawString(prefix)
		if in.Active == nil {
			out.RawString("null")
		} else {
			out.Bool(bool(*in.Active))
		}
	}
	{
		const prefix string = ",\"power\":"
		out.RawString(prefix)
		if in.Power == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Power))
		}
	}
	{
		const prefix string = ",\"location\":"
		out.RawString(prefix)
		if in.Location == nil {
			out.RawString("null")
		} else {
			out.Int(int(*in.Location))
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VehicleUpdateRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComOpenFarmsInventoryEntHttp(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VehicleUpdateRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComOpenFarmsInventoryEntHttp(l, v)
}
func easyjsonC5a4559bDecodeGithubComOpenFarmsInventoryEntHttp1(in *jlexer.Lexer, out *VehicleCreateRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "create_time":
			if in.IsNull() {
				in.Skip()
				out.CreateTime = nil
			} else {
				if out.CreateTime == nil {
					out.CreateTime = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.CreateTime).UnmarshalJSON(data))
				}
			}
		case "update_time":
			if in.IsNull() {
				in.Skip()
				out.UpdateTime = nil
			} else {
				if out.UpdateTime == nil {
					out.UpdateTime = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.UpdateTime).UnmarshalJSON(data))
				}
			}
		case "make":
			if in.IsNull() {
				in.Skip()
				out.Make = nil
			} else {
				if out.Make == nil {
					out.Make = new(string)
				}
				*out.Make = string(in.String())
			}
		case "model":
			if in.IsNull() {
				in.Skip()
				out.Model = nil
			} else {
				if out.Model == nil {
					out.Model = new(string)
				}
				*out.Model = string(in.String())
			}
		case "hours":
			if in.IsNull() {
				in.Skip()
				out.Hours = nil
			} else {
				if out.Hours == nil {
					out.Hours = new(int64)
				}
				*out.Hours = int64(in.Int64())
			}
		case "year":
			if in.IsNull() {
				in.Skip()
				out.Year = nil
			} else {
				if out.Year == nil {
					out.Year = new(string)
				}
				*out.Year = string(in.String())
			}
		case "active":
			if in.IsNull() {
				in.Skip()
				out.Active = nil
			} else {
				if out.Active == nil {
					out.Active = new(bool)
				}
				*out.Active = bool(in.Bool())
			}
		case "power":
			if in.IsNull() {
				in.Skip()
				out.Power = nil
			} else {
				if out.Power == nil {
					out.Power = new(string)
				}
				*out.Power = string(in.String())
			}
		case "location":
			if in.IsNull() {
				in.Skip()
				out.Location = nil
			} else {
				if out.Location == nil {
					out.Location = new(int)
				}
				*out.Location = int(in.Int())
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComOpenFarmsInventoryEntHttp1(out *jwriter.Writer, in VehicleCreateRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"create_time\":"
		out.RawString(prefix[1:])
		if in.CreateTime == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.CreateTime).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"update_time\":"
		out.RawString(prefix)
		if in.UpdateTime == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.UpdateTime).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"make\":"
		out.RawString(prefix)
		if in.Make == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Make))
		}
	}
	{
		const prefix string = ",\"model\":"
		out.RawString(prefix)
		if in.Model == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Model))
		}
	}
	{
		const prefix string = ",\"hours\":"
		out.RawString(prefix)
		if in.Hours == nil {
			out.RawString("null")
		} else {
			out.Int64(int64(*in.Hours))
		}
	}
	{
		const prefix string = ",\"year\":"
		out.RawString(prefix)
		if in.Year == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Year))
		}
	}
	{
		const prefix string = ",\"active\":"
		out.RawString(prefix)
		if in.Active == nil {
			out.RawString("null")
		} else {
			out.Bool(bool(*in.Active))
		}
	}
	{
		const prefix string = ",\"power\":"
		out.RawString(prefix)
		if in.Power == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Power))
		}
	}
	{
		const prefix string = ",\"location\":"
		out.RawString(prefix)
		if in.Location == nil {
			out.RawString("null")
		} else {
			out.Int(int(*in.Location))
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VehicleCreateRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComOpenFarmsInventoryEntHttp1(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VehicleCreateRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComOpenFarmsInventoryEntHttp1(l, v)
}
func easyjsonC5a4559bDecodeGithubComOpenFarmsInventoryEntHttp2(in *jlexer.Lexer, out *Vehicle1702989761Views) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Vehicle1702989761Views, 0, 8)
			} else {
				*out = Vehicle1702989761Views{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 *Vehicle1702989761View
			if in.IsNull() {
				in.Skip()
				v1 = nil
			} else {
				if v1 == nil {
					v1 = new(Vehicle1702989761View)
				}
				(*v1).UnmarshalEasyJSON(in)
			}
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComOpenFarmsInventoryEntHttp2(out *jwriter.Writer, in Vehicle1702989761Views) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			if v3 == nil {
				out.RawString("null")
			} else {
				(*v3).MarshalEasyJSON(out)
			}
		}
		out.RawByte(']')
	}
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Vehicle1702989761Views) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComOpenFarmsInventoryEntHttp2(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Vehicle1702989761Views) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComOpenFarmsInventoryEntHttp2(l, v)
}
func easyjsonC5a4559bDecodeGithubComOpenFarmsInventoryEntHttp3(in *jlexer.Lexer, out *Vehicle1702989761View) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "create_time":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreateTime).UnmarshalJSON(data))
			}
		case "update_time":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdateTime).UnmarshalJSON(data))
			}
		case "make":
			out.Make = string(in.String())
		case "model":
			out.Model = string(in.String())
		case "hours":
			out.Hours = int64(in.Int64())
		case "year":
			out.Year = string(in.String())
		case "active":
			out.Active = bool(in.Bool())
		case "power":
			out.Power = string(in.String())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComOpenFarmsInventoryEntHttp3(out *jwriter.Writer, in Vehicle1702989761View) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if true {
		const prefix string = ",\"create_time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.CreateTime).MarshalJSON())
	}
	if true {
		const prefix string = ",\"update_time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.UpdateTime).MarshalJSON())
	}
	if in.Make != "" {
		const prefix string = ",\"make\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Make))
	}
	if in.Model != "" {
		const prefix string = ",\"model\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Model))
	}
	if in.Hours != 0 {
		const prefix string = ",\"hours\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Hours))
	}
	if in.Year != "" {
		const prefix string = ",\"year\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Year))
	}
	if in.Active {
		const prefix string = ",\"active\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Active))
	}
	if in.Power != "" {
		const prefix string = ",\"power\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Power))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Vehicle1702989761View) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComOpenFarmsInventoryEntHttp3(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Vehicle1702989761View) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComOpenFarmsInventoryEntHttp3(l, v)
}
func easyjsonC5a4559bDecodeGithubComOpenFarmsInventoryEntHttp4(in *jlexer.Lexer, out *ToolUpdateRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "create_time":
			if in.IsNull() {
				in.Skip()
				out.CreateTime = nil
			} else {
				if out.CreateTime == nil {
					out.CreateTime = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.CreateTime).UnmarshalJSON(data))
				}
			}
		case "update_time":
			if in.IsNull() {
				in.Skip()
				out.UpdateTime = nil
			} else {
				if out.UpdateTime == nil {
					out.UpdateTime = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.UpdateTime).UnmarshalJSON(data))
				}
			}
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "powered":
			if in.IsNull() {
				in.Skip()
				out.Powered = nil
			} else {
				if out.Powered == nil {
					out.Powered = new(bool)
				}
				*out.Powered = bool(in.Bool())
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComOpenFarmsInventoryEntHttp4(out *jwriter.Writer, in ToolUpdateRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"create_time\":"
		out.RawString(prefix[1:])
		if in.CreateTime == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.CreateTime).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"update_time\":"
		out.RawString(prefix)
		if in.UpdateTime == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.UpdateTime).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		if in.Name == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Name))
		}
	}
	{
		const prefix string = ",\"powered\":"
		out.RawString(prefix)
		if in.Powered == nil {
			out.RawString("null")
		} else {
			out.Bool(bool(*in.Powered))
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ToolUpdateRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComOpenFarmsInventoryEntHttp4(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ToolUpdateRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComOpenFarmsInventoryEntHttp4(l, v)
}
func easyjsonC5a4559bDecodeGithubComOpenFarmsInventoryEntHttp5(in *jlexer.Lexer, out *ToolCreateRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "create_time":
			if in.IsNull() {
				in.Skip()
				out.CreateTime = nil
			} else {
				if out.CreateTime == nil {
					out.CreateTime = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.CreateTime).UnmarshalJSON(data))
				}
			}
		case "update_time":
			if in.IsNull() {
				in.Skip()
				out.UpdateTime = nil
			} else {
				if out.UpdateTime == nil {
					out.UpdateTime = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.UpdateTime).UnmarshalJSON(data))
				}
			}
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "powered":
			if in.IsNull() {
				in.Skip()
				out.Powered = nil
			} else {
				if out.Powered == nil {
					out.Powered = new(bool)
				}
				*out.Powered = bool(in.Bool())
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComOpenFarmsInventoryEntHttp5(out *jwriter.Writer, in ToolCreateRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"create_time\":"
		out.RawString(prefix[1:])
		if in.CreateTime == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.CreateTime).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"update_time\":"
		out.RawString(prefix)
		if in.UpdateTime == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.UpdateTime).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		if in.Name == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Name))
		}
	}
	{
		const prefix string = ",\"powered\":"
		out.RawString(prefix)
		if in.Powered == nil {
			out.RawString("null")
		} else {
			out.Bool(bool(*in.Powered))
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ToolCreateRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComOpenFarmsInventoryEntHttp5(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ToolCreateRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComOpenFarmsInventoryEntHttp5(l, v)
}
func easyjsonC5a4559bDecodeGithubComOpenFarmsInventoryEntHttp6(in *jlexer.Lexer, out *Tool178816486Views) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Tool178816486Views, 0, 8)
			} else {
				*out = Tool178816486Views{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v4 *Tool178816486View
			if in.IsNull() {
				in.Skip()
				v4 = nil
			} else {
				if v4 == nil {
					v4 = new(Tool178816486View)
				}
				(*v4).UnmarshalEasyJSON(in)
			}
			*out = append(*out, v4)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComOpenFarmsInventoryEntHttp6(out *jwriter.Writer, in Tool178816486Views) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v5, v6 := range in {
			if v5 > 0 {
				out.RawByte(',')
			}
			if v6 == nil {
				out.RawString("null")
			} else {
				(*v6).MarshalEasyJSON(out)
			}
		}
		out.RawByte(']')
	}
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Tool178816486Views) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComOpenFarmsInventoryEntHttp6(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Tool178816486Views) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComOpenFarmsInventoryEntHttp6(l, v)
}
func easyjsonC5a4559bDecodeGithubComOpenFarmsInventoryEntHttp7(in *jlexer.Lexer, out *Tool178816486View) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "create_time":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreateTime).UnmarshalJSON(data))
			}
		case "update_time":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdateTime).UnmarshalJSON(data))
			}
		case "name":
			out.Name = string(in.String())
		case "powered":
			out.Powered = bool(in.Bool())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComOpenFarmsInventoryEntHttp7(out *jwriter.Writer, in Tool178816486View) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if true {
		const prefix string = ",\"create_time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.CreateTime).MarshalJSON())
	}
	if true {
		const prefix string = ",\"update_time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.UpdateTime).MarshalJSON())
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Powered {
		const prefix string = ",\"powered\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Powered))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Tool178816486View) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComOpenFarmsInventoryEntHttp7(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Tool178816486View) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComOpenFarmsInventoryEntHttp7(l, v)
}
func easyjsonC5a4559bDecodeGithubComOpenFarmsInventoryEntHttp8(in *jlexer.Lexer, out *LocationUpdateRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "create_time":
			if in.IsNull() {
				in.Skip()
				out.CreateTime = nil
			} else {
				if out.CreateTime == nil {
					out.CreateTime = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.CreateTime).UnmarshalJSON(data))
				}
			}
		case "update_time":
			if in.IsNull() {
				in.Skip()
				out.UpdateTime = nil
			} else {
				if out.UpdateTime == nil {
					out.UpdateTime = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.UpdateTime).UnmarshalJSON(data))
				}
			}
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "zone":
			if in.IsNull() {
				in.Skip()
				out.Zone = nil
			} else {
				if out.Zone == nil {
					out.Zone = new(int32)
				}
				*out.Zone = int32(in.Int32())
			}
		case "vehicle":
			if in.IsNull() {
				in.Skip()
				out.Vehicle = nil
			} else {
				in.Delim('[')
				if out.Vehicle == nil {
					if !in.IsDelim(']') {
						out.Vehicle = make([]int, 0, 8)
					} else {
						out.Vehicle = []int{}
					}
				} else {
					out.Vehicle = (out.Vehicle)[:0]
				}
				for !in.IsDelim(']') {
					var v7 int
					v7 = int(in.Int())
					out.Vehicle = append(out.Vehicle, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComOpenFarmsInventoryEntHttp8(out *jwriter.Writer, in LocationUpdateRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"create_time\":"
		out.RawString(prefix[1:])
		if in.CreateTime == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.CreateTime).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"update_time\":"
		out.RawString(prefix)
		if in.UpdateTime == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.UpdateTime).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		if in.Name == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Name))
		}
	}
	{
		const prefix string = ",\"zone\":"
		out.RawString(prefix)
		if in.Zone == nil {
			out.RawString("null")
		} else {
			out.Int32(int32(*in.Zone))
		}
	}
	{
		const prefix string = ",\"vehicle\":"
		out.RawString(prefix)
		if in.Vehicle == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Vehicle {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v9))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LocationUpdateRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComOpenFarmsInventoryEntHttp8(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LocationUpdateRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComOpenFarmsInventoryEntHttp8(l, v)
}
func easyjsonC5a4559bDecodeGithubComOpenFarmsInventoryEntHttp9(in *jlexer.Lexer, out *LocationCreateRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "create_time":
			if in.IsNull() {
				in.Skip()
				out.CreateTime = nil
			} else {
				if out.CreateTime == nil {
					out.CreateTime = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.CreateTime).UnmarshalJSON(data))
				}
			}
		case "update_time":
			if in.IsNull() {
				in.Skip()
				out.UpdateTime = nil
			} else {
				if out.UpdateTime == nil {
					out.UpdateTime = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.UpdateTime).UnmarshalJSON(data))
				}
			}
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "zone":
			if in.IsNull() {
				in.Skip()
				out.Zone = nil
			} else {
				if out.Zone == nil {
					out.Zone = new(int32)
				}
				*out.Zone = int32(in.Int32())
			}
		case "vehicle":
			if in.IsNull() {
				in.Skip()
				out.Vehicle = nil
			} else {
				in.Delim('[')
				if out.Vehicle == nil {
					if !in.IsDelim(']') {
						out.Vehicle = make([]int, 0, 8)
					} else {
						out.Vehicle = []int{}
					}
				} else {
					out.Vehicle = (out.Vehicle)[:0]
				}
				for !in.IsDelim(']') {
					var v10 int
					v10 = int(in.Int())
					out.Vehicle = append(out.Vehicle, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComOpenFarmsInventoryEntHttp9(out *jwriter.Writer, in LocationCreateRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"create_time\":"
		out.RawString(prefix[1:])
		if in.CreateTime == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.CreateTime).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"update_time\":"
		out.RawString(prefix)
		if in.UpdateTime == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.UpdateTime).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		if in.Name == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Name))
		}
	}
	{
		const prefix string = ",\"zone\":"
		out.RawString(prefix)
		if in.Zone == nil {
			out.RawString("null")
		} else {
			out.Int32(int32(*in.Zone))
		}
	}
	{
		const prefix string = ",\"vehicle\":"
		out.RawString(prefix)
		if in.Vehicle == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Vehicle {
				if v11 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v12))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LocationCreateRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComOpenFarmsInventoryEntHttp9(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LocationCreateRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComOpenFarmsInventoryEntHttp9(l, v)
}
func easyjsonC5a4559bDecodeGithubComOpenFarmsInventoryEntHttp10(in *jlexer.Lexer, out *Location948740745Views) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Location948740745Views, 0, 8)
			} else {
				*out = Location948740745Views{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v13 *Location948740745View
			if in.IsNull() {
				in.Skip()
				v13 = nil
			} else {
				if v13 == nil {
					v13 = new(Location948740745View)
				}
				(*v13).UnmarshalEasyJSON(in)
			}
			*out = append(*out, v13)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComOpenFarmsInventoryEntHttp10(out *jwriter.Writer, in Location948740745Views) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v14, v15 := range in {
			if v14 > 0 {
				out.RawByte(',')
			}
			if v15 == nil {
				out.RawString("null")
			} else {
				(*v15).MarshalEasyJSON(out)
			}
		}
		out.RawByte(']')
	}
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Location948740745Views) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComOpenFarmsInventoryEntHttp10(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Location948740745Views) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComOpenFarmsInventoryEntHttp10(l, v)
}
func easyjsonC5a4559bDecodeGithubComOpenFarmsInventoryEntHttp11(in *jlexer.Lexer, out *Location948740745View) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "create_time":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreateTime).UnmarshalJSON(data))
			}
		case "update_time":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdateTime).UnmarshalJSON(data))
			}
		case "name":
			out.Name = string(in.String())
		case "zone":
			out.Zone = int32(in.Int32())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComOpenFarmsInventoryEntHttp11(out *jwriter.Writer, in Location948740745View) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if true {
		const prefix string = ",\"create_time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.CreateTime).MarshalJSON())
	}
	if true {
		const prefix string = ",\"update_time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.UpdateTime).MarshalJSON())
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Zone != 0 {
		const prefix string = ",\"zone\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Zone))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Location948740745View) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComOpenFarmsInventoryEntHttp11(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Location948740745View) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComOpenFarmsInventoryEntHttp11(l, v)
}
func easyjsonC5a4559bDecodeGithubComOpenFarmsInventoryEntHttp12(in *jlexer.Lexer, out *ImplementUpdateRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "create_time":
			if in.IsNull() {
				in.Skip()
				out.CreateTime = nil
			} else {
				if out.CreateTime == nil {
					out.CreateTime = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.CreateTime).UnmarshalJSON(data))
				}
			}
		case "update_time":
			if in.IsNull() {
				in.Skip()
				out.UpdateTime = nil
			} else {
				if out.UpdateTime == nil {
					out.UpdateTime = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.UpdateTime).UnmarshalJSON(data))
				}
			}
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComOpenFarmsInventoryEntHttp12(out *jwriter.Writer, in ImplementUpdateRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"create_time\":"
		out.RawString(prefix[1:])
		if in.CreateTime == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.CreateTime).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"update_time\":"
		out.RawString(prefix)
		if in.UpdateTime == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.UpdateTime).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		if in.Name == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Name))
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ImplementUpdateRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComOpenFarmsInventoryEntHttp12(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ImplementUpdateRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComOpenFarmsInventoryEntHttp12(l, v)
}
func easyjsonC5a4559bDecodeGithubComOpenFarmsInventoryEntHttp13(in *jlexer.Lexer, out *ImplementCreateRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "create_time":
			if in.IsNull() {
				in.Skip()
				out.CreateTime = nil
			} else {
				if out.CreateTime == nil {
					out.CreateTime = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.CreateTime).UnmarshalJSON(data))
				}
			}
		case "update_time":
			if in.IsNull() {
				in.Skip()
				out.UpdateTime = nil
			} else {
				if out.UpdateTime == nil {
					out.UpdateTime = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.UpdateTime).UnmarshalJSON(data))
				}
			}
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComOpenFarmsInventoryEntHttp13(out *jwriter.Writer, in ImplementCreateRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"create_time\":"
		out.RawString(prefix[1:])
		if in.CreateTime == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.CreateTime).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"update_time\":"
		out.RawString(prefix)
		if in.UpdateTime == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.UpdateTime).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		if in.Name == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Name))
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ImplementCreateRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComOpenFarmsInventoryEntHttp13(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ImplementCreateRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComOpenFarmsInventoryEntHttp13(l, v)
}
func easyjsonC5a4559bDecodeGithubComOpenFarmsInventoryEntHttp14(in *jlexer.Lexer, out *Implement1296325875Views) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Implement1296325875Views, 0, 8)
			} else {
				*out = Implement1296325875Views{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v16 *Implement1296325875View
			if in.IsNull() {
				in.Skip()
				v16 = nil
			} else {
				if v16 == nil {
					v16 = new(Implement1296325875View)
				}
				(*v16).UnmarshalEasyJSON(in)
			}
			*out = append(*out, v16)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComOpenFarmsInventoryEntHttp14(out *jwriter.Writer, in Implement1296325875Views) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v17, v18 := range in {
			if v17 > 0 {
				out.RawByte(',')
			}
			if v18 == nil {
				out.RawString("null")
			} else {
				(*v18).MarshalEasyJSON(out)
			}
		}
		out.RawByte(']')
	}
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Implement1296325875Views) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComOpenFarmsInventoryEntHttp14(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Implement1296325875Views) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComOpenFarmsInventoryEntHttp14(l, v)
}
func easyjsonC5a4559bDecodeGithubComOpenFarmsInventoryEntHttp15(in *jlexer.Lexer, out *Implement1296325875View) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "create_time":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreateTime).UnmarshalJSON(data))
			}
		case "update_time":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdateTime).UnmarshalJSON(data))
			}
		case "name":
			out.Name = string(in.String())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComOpenFarmsInventoryEntHttp15(out *jwriter.Writer, in Implement1296325875View) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if true {
		const prefix string = ",\"create_time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.CreateTime).MarshalJSON())
	}
	if true {
		const prefix string = ",\"update_time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.UpdateTime).MarshalJSON())
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Implement1296325875View) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComOpenFarmsInventoryEntHttp15(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Implement1296325875View) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComOpenFarmsInventoryEntHttp15(l, v)
}
func easyjsonC5a4559bDecodeGithubComOpenFarmsInventoryEntHttp16(in *jlexer.Lexer, out *ErrResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = int(in.Int())
		case "status":
			out.Status = string(in.String())
		case "errors":
			if m, ok := out.Errors.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Errors.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Errors = in.Interface()
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComOpenFarmsInventoryEntHttp16(out *jwriter.Writer, in ErrResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Code))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	if in.Errors != nil {
		const prefix string = ",\"errors\":"
		out.RawString(prefix)
		if m, ok := in.Errors.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Errors.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Errors))
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ErrResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComOpenFarmsInventoryEntHttp16(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ErrResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComOpenFarmsInventoryEntHttp16(l, v)
}
func easyjsonC5a4559bDecodeGithubComOpenFarmsInventoryEntHttp17(in *jlexer.Lexer, out *EquipmentUpdateRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "create_time":
			if in.IsNull() {
				in.Skip()
				out.CreateTime = nil
			} else {
				if out.CreateTime == nil {
					out.CreateTime = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.CreateTime).UnmarshalJSON(data))
				}
			}
		case "update_time":
			if in.IsNull() {
				in.Skip()
				out.UpdateTime = nil
			} else {
				if out.UpdateTime == nil {
					out.UpdateTime = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.UpdateTime).UnmarshalJSON(data))
				}
			}
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "condition":
			if in.IsNull() {
				in.Skip()
				out.Condition = nil
			} else {
				if out.Condition == nil {
					out.Condition = new(string)
				}
				*out.Condition = string(in.String())
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComOpenFarmsInventoryEntHttp17(out *jwriter.Writer, in EquipmentUpdateRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"create_time\":"
		out.RawString(prefix[1:])
		if in.CreateTime == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.CreateTime).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"update_time\":"
		out.RawString(prefix)
		if in.UpdateTime == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.UpdateTime).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		if in.Name == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Name))
		}
	}
	{
		const prefix string = ",\"condition\":"
		out.RawString(prefix)
		if in.Condition == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Condition))
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EquipmentUpdateRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComOpenFarmsInventoryEntHttp17(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EquipmentUpdateRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComOpenFarmsInventoryEntHttp17(l, v)
}
func easyjsonC5a4559bDecodeGithubComOpenFarmsInventoryEntHttp18(in *jlexer.Lexer, out *EquipmentCreateRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "create_time":
			if in.IsNull() {
				in.Skip()
				out.CreateTime = nil
			} else {
				if out.CreateTime == nil {
					out.CreateTime = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.CreateTime).UnmarshalJSON(data))
				}
			}
		case "update_time":
			if in.IsNull() {
				in.Skip()
				out.UpdateTime = nil
			} else {
				if out.UpdateTime == nil {
					out.UpdateTime = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.UpdateTime).UnmarshalJSON(data))
				}
			}
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "condition":
			if in.IsNull() {
				in.Skip()
				out.Condition = nil
			} else {
				if out.Condition == nil {
					out.Condition = new(string)
				}
				*out.Condition = string(in.String())
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComOpenFarmsInventoryEntHttp18(out *jwriter.Writer, in EquipmentCreateRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"create_time\":"
		out.RawString(prefix[1:])
		if in.CreateTime == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.CreateTime).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"update_time\":"
		out.RawString(prefix)
		if in.UpdateTime == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.UpdateTime).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		if in.Name == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Name))
		}
	}
	{
		const prefix string = ",\"condition\":"
		out.RawString(prefix)
		if in.Condition == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Condition))
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EquipmentCreateRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComOpenFarmsInventoryEntHttp18(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EquipmentCreateRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComOpenFarmsInventoryEntHttp18(l, v)
}
func easyjsonC5a4559bDecodeGithubComOpenFarmsInventoryEntHttp19(in *jlexer.Lexer, out *Equipment3958372643Views) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Equipment3958372643Views, 0, 8)
			} else {
				*out = Equipment3958372643Views{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v19 *Equipment3958372643View
			if in.IsNull() {
				in.Skip()
				v19 = nil
			} else {
				if v19 == nil {
					v19 = new(Equipment3958372643View)
				}
				(*v19).UnmarshalEasyJSON(in)
			}
			*out = append(*out, v19)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComOpenFarmsInventoryEntHttp19(out *jwriter.Writer, in Equipment3958372643Views) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v20, v21 := range in {
			if v20 > 0 {
				out.RawByte(',')
			}
			if v21 == nil {
				out.RawString("null")
			} else {
				(*v21).MarshalEasyJSON(out)
			}
		}
		out.RawByte(']')
	}
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Equipment3958372643Views) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComOpenFarmsInventoryEntHttp19(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Equipment3958372643Views) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComOpenFarmsInventoryEntHttp19(l, v)
}
func easyjsonC5a4559bDecodeGithubComOpenFarmsInventoryEntHttp20(in *jlexer.Lexer, out *Equipment3958372643View) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "create_time":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreateTime).UnmarshalJSON(data))
			}
		case "update_time":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdateTime).UnmarshalJSON(data))
			}
		case "name":
			out.Name = string(in.String())
		case "condition":
			out.Condition = string(in.String())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComOpenFarmsInventoryEntHttp20(out *jwriter.Writer, in Equipment3958372643View) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if true {
		const prefix string = ",\"create_time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.CreateTime).MarshalJSON())
	}
	if true {
		const prefix string = ",\"update_time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.UpdateTime).MarshalJSON())
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Condition != "" {
		const prefix string = ",\"condition\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Condition))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Equipment3958372643View) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComOpenFarmsInventoryEntHttp20(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Equipment3958372643View) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComOpenFarmsInventoryEntHttp20(l, v)
}
func easyjsonC5a4559bDecodeGithubComOpenFarmsInventoryEntHttp21(in *jlexer.Lexer, out *CategoryUpdateRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "create_time":
			if in.IsNull() {
				in.Skip()
				out.CreateTime = nil
			} else {
				if out.CreateTime == nil {
					out.CreateTime = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.CreateTime).UnmarshalJSON(data))
				}
			}
		case "update_time":
			if in.IsNull() {
				in.Skip()
				out.UpdateTime = nil
			} else {
				if out.UpdateTime == nil {
					out.UpdateTime = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.UpdateTime).UnmarshalJSON(data))
				}
			}
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComOpenFarmsInventoryEntHttp21(out *jwriter.Writer, in CategoryUpdateRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"create_time\":"
		out.RawString(prefix[1:])
		if in.CreateTime == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.CreateTime).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"update_time\":"
		out.RawString(prefix)
		if in.UpdateTime == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.UpdateTime).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		if in.Name == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Name))
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CategoryUpdateRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComOpenFarmsInventoryEntHttp21(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CategoryUpdateRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComOpenFarmsInventoryEntHttp21(l, v)
}
func easyjsonC5a4559bDecodeGithubComOpenFarmsInventoryEntHttp22(in *jlexer.Lexer, out *CategoryCreateRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "create_time":
			if in.IsNull() {
				in.Skip()
				out.CreateTime = nil
			} else {
				if out.CreateTime == nil {
					out.CreateTime = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.CreateTime).UnmarshalJSON(data))
				}
			}
		case "update_time":
			if in.IsNull() {
				in.Skip()
				out.UpdateTime = nil
			} else {
				if out.UpdateTime == nil {
					out.UpdateTime = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.UpdateTime).UnmarshalJSON(data))
				}
			}
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComOpenFarmsInventoryEntHttp22(out *jwriter.Writer, in CategoryCreateRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"create_time\":"
		out.RawString(prefix[1:])
		if in.CreateTime == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.CreateTime).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"update_time\":"
		out.RawString(prefix)
		if in.UpdateTime == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.UpdateTime).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		if in.Name == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Name))
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CategoryCreateRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComOpenFarmsInventoryEntHttp22(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CategoryCreateRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComOpenFarmsInventoryEntHttp22(l, v)
}
func easyjsonC5a4559bDecodeGithubComOpenFarmsInventoryEntHttp23(in *jlexer.Lexer, out *Category1462705340Views) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Category1462705340Views, 0, 8)
			} else {
				*out = Category1462705340Views{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v22 *Category1462705340View
			if in.IsNull() {
				in.Skip()
				v22 = nil
			} else {
				if v22 == nil {
					v22 = new(Category1462705340View)
				}
				(*v22).UnmarshalEasyJSON(in)
			}
			*out = append(*out, v22)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComOpenFarmsInventoryEntHttp23(out *jwriter.Writer, in Category1462705340Views) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v23, v24 := range in {
			if v23 > 0 {
				out.RawByte(',')
			}
			if v24 == nil {
				out.RawString("null")
			} else {
				(*v24).MarshalEasyJSON(out)
			}
		}
		out.RawByte(']')
	}
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Category1462705340Views) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComOpenFarmsInventoryEntHttp23(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Category1462705340Views) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComOpenFarmsInventoryEntHttp23(l, v)
}
func easyjsonC5a4559bDecodeGithubComOpenFarmsInventoryEntHttp24(in *jlexer.Lexer, out *Category1462705340View) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "create_time":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreateTime).UnmarshalJSON(data))
			}
		case "update_time":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdateTime).UnmarshalJSON(data))
			}
		case "name":
			out.Name = string(in.String())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComOpenFarmsInventoryEntHttp24(out *jwriter.Writer, in Category1462705340View) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if true {
		const prefix string = ",\"create_time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.CreateTime).MarshalJSON())
	}
	if true {
		const prefix string = ",\"update_time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.UpdateTime).MarshalJSON())
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Category1462705340View) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComOpenFarmsInventoryEntHttp24(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Category1462705340View) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComOpenFarmsInventoryEntHttp24(l, v)
}
