// Code generated by entc, DO NOT EDIT.

package vehicle

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/open-farms/inventory/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// Make applies equality check predicate on the "make" field. It's identical to MakeEQ.
func Make(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMake), v))
	})
}

// Model applies equality check predicate on the "model" field. It's identical to ModelEQ.
func Model(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldModel), v))
	})
}

// Hours applies equality check predicate on the "hours" field. It's identical to HoursEQ.
func Hours(v int64) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHours), v))
	})
}

// Year applies equality check predicate on the "year" field. It's identical to YearEQ.
func Year(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldYear), v))
	})
}

// Active applies equality check predicate on the "active" field. It's identical to ActiveEQ.
func Active(v bool) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldActive), v))
	})
}

// Power applies equality check predicate on the "power" field. It's identical to PowerEQ.
func Power(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPower), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Vehicle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Vehicle(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Vehicle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Vehicle(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.Vehicle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Vehicle(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Vehicle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Vehicle(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// MakeEQ applies the EQ predicate on the "make" field.
func MakeEQ(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMake), v))
	})
}

// MakeNEQ applies the NEQ predicate on the "make" field.
func MakeNEQ(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMake), v))
	})
}

// MakeIn applies the In predicate on the "make" field.
func MakeIn(vs ...string) predicate.Vehicle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Vehicle(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMake), v...))
	})
}

// MakeNotIn applies the NotIn predicate on the "make" field.
func MakeNotIn(vs ...string) predicate.Vehicle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Vehicle(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMake), v...))
	})
}

// MakeGT applies the GT predicate on the "make" field.
func MakeGT(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMake), v))
	})
}

// MakeGTE applies the GTE predicate on the "make" field.
func MakeGTE(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMake), v))
	})
}

// MakeLT applies the LT predicate on the "make" field.
func MakeLT(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMake), v))
	})
}

// MakeLTE applies the LTE predicate on the "make" field.
func MakeLTE(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMake), v))
	})
}

// MakeContains applies the Contains predicate on the "make" field.
func MakeContains(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMake), v))
	})
}

// MakeHasPrefix applies the HasPrefix predicate on the "make" field.
func MakeHasPrefix(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMake), v))
	})
}

// MakeHasSuffix applies the HasSuffix predicate on the "make" field.
func MakeHasSuffix(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMake), v))
	})
}

// MakeEqualFold applies the EqualFold predicate on the "make" field.
func MakeEqualFold(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMake), v))
	})
}

// MakeContainsFold applies the ContainsFold predicate on the "make" field.
func MakeContainsFold(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMake), v))
	})
}

// ModelEQ applies the EQ predicate on the "model" field.
func ModelEQ(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldModel), v))
	})
}

// ModelNEQ applies the NEQ predicate on the "model" field.
func ModelNEQ(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldModel), v))
	})
}

// ModelIn applies the In predicate on the "model" field.
func ModelIn(vs ...string) predicate.Vehicle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Vehicle(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldModel), v...))
	})
}

// ModelNotIn applies the NotIn predicate on the "model" field.
func ModelNotIn(vs ...string) predicate.Vehicle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Vehicle(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldModel), v...))
	})
}

// ModelGT applies the GT predicate on the "model" field.
func ModelGT(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldModel), v))
	})
}

// ModelGTE applies the GTE predicate on the "model" field.
func ModelGTE(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldModel), v))
	})
}

// ModelLT applies the LT predicate on the "model" field.
func ModelLT(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldModel), v))
	})
}

// ModelLTE applies the LTE predicate on the "model" field.
func ModelLTE(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldModel), v))
	})
}

// ModelContains applies the Contains predicate on the "model" field.
func ModelContains(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldModel), v))
	})
}

// ModelHasPrefix applies the HasPrefix predicate on the "model" field.
func ModelHasPrefix(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldModel), v))
	})
}

// ModelHasSuffix applies the HasSuffix predicate on the "model" field.
func ModelHasSuffix(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldModel), v))
	})
}

// ModelEqualFold applies the EqualFold predicate on the "model" field.
func ModelEqualFold(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldModel), v))
	})
}

// ModelContainsFold applies the ContainsFold predicate on the "model" field.
func ModelContainsFold(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldModel), v))
	})
}

// HoursEQ applies the EQ predicate on the "hours" field.
func HoursEQ(v int64) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHours), v))
	})
}

// HoursNEQ applies the NEQ predicate on the "hours" field.
func HoursNEQ(v int64) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHours), v))
	})
}

// HoursIn applies the In predicate on the "hours" field.
func HoursIn(vs ...int64) predicate.Vehicle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Vehicle(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldHours), v...))
	})
}

// HoursNotIn applies the NotIn predicate on the "hours" field.
func HoursNotIn(vs ...int64) predicate.Vehicle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Vehicle(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldHours), v...))
	})
}

// HoursGT applies the GT predicate on the "hours" field.
func HoursGT(v int64) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHours), v))
	})
}

// HoursGTE applies the GTE predicate on the "hours" field.
func HoursGTE(v int64) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHours), v))
	})
}

// HoursLT applies the LT predicate on the "hours" field.
func HoursLT(v int64) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHours), v))
	})
}

// HoursLTE applies the LTE predicate on the "hours" field.
func HoursLTE(v int64) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHours), v))
	})
}

// YearEQ applies the EQ predicate on the "year" field.
func YearEQ(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldYear), v))
	})
}

// YearNEQ applies the NEQ predicate on the "year" field.
func YearNEQ(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldYear), v))
	})
}

// YearIn applies the In predicate on the "year" field.
func YearIn(vs ...string) predicate.Vehicle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Vehicle(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldYear), v...))
	})
}

// YearNotIn applies the NotIn predicate on the "year" field.
func YearNotIn(vs ...string) predicate.Vehicle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Vehicle(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldYear), v...))
	})
}

// YearGT applies the GT predicate on the "year" field.
func YearGT(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldYear), v))
	})
}

// YearGTE applies the GTE predicate on the "year" field.
func YearGTE(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldYear), v))
	})
}

// YearLT applies the LT predicate on the "year" field.
func YearLT(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldYear), v))
	})
}

// YearLTE applies the LTE predicate on the "year" field.
func YearLTE(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldYear), v))
	})
}

// YearContains applies the Contains predicate on the "year" field.
func YearContains(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldYear), v))
	})
}

// YearHasPrefix applies the HasPrefix predicate on the "year" field.
func YearHasPrefix(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldYear), v))
	})
}

// YearHasSuffix applies the HasSuffix predicate on the "year" field.
func YearHasSuffix(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldYear), v))
	})
}

// YearIsNil applies the IsNil predicate on the "year" field.
func YearIsNil() predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldYear)))
	})
}

// YearNotNil applies the NotNil predicate on the "year" field.
func YearNotNil() predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldYear)))
	})
}

// YearEqualFold applies the EqualFold predicate on the "year" field.
func YearEqualFold(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldYear), v))
	})
}

// YearContainsFold applies the ContainsFold predicate on the "year" field.
func YearContainsFold(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldYear), v))
	})
}

// ActiveEQ applies the EQ predicate on the "active" field.
func ActiveEQ(v bool) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldActive), v))
	})
}

// ActiveNEQ applies the NEQ predicate on the "active" field.
func ActiveNEQ(v bool) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldActive), v))
	})
}

// PowerEQ applies the EQ predicate on the "power" field.
func PowerEQ(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPower), v))
	})
}

// PowerNEQ applies the NEQ predicate on the "power" field.
func PowerNEQ(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPower), v))
	})
}

// PowerIn applies the In predicate on the "power" field.
func PowerIn(vs ...string) predicate.Vehicle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Vehicle(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPower), v...))
	})
}

// PowerNotIn applies the NotIn predicate on the "power" field.
func PowerNotIn(vs ...string) predicate.Vehicle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Vehicle(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPower), v...))
	})
}

// PowerGT applies the GT predicate on the "power" field.
func PowerGT(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPower), v))
	})
}

// PowerGTE applies the GTE predicate on the "power" field.
func PowerGTE(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPower), v))
	})
}

// PowerLT applies the LT predicate on the "power" field.
func PowerLT(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPower), v))
	})
}

// PowerLTE applies the LTE predicate on the "power" field.
func PowerLTE(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPower), v))
	})
}

// PowerContains applies the Contains predicate on the "power" field.
func PowerContains(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPower), v))
	})
}

// PowerHasPrefix applies the HasPrefix predicate on the "power" field.
func PowerHasPrefix(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPower), v))
	})
}

// PowerHasSuffix applies the HasSuffix predicate on the "power" field.
func PowerHasSuffix(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPower), v))
	})
}

// PowerIsNil applies the IsNil predicate on the "power" field.
func PowerIsNil() predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPower)))
	})
}

// PowerNotNil applies the NotNil predicate on the "power" field.
func PowerNotNil() predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPower)))
	})
}

// PowerEqualFold applies the EqualFold predicate on the "power" field.
func PowerEqualFold(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPower), v))
	})
}

// PowerContainsFold applies the ContainsFold predicate on the "power" field.
func PowerContainsFold(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPower), v))
	})
}

// HasLocation applies the HasEdge predicate on the "location" edge.
func HasLocation() predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(LocationTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, LocationTable, LocationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLocationWith applies the HasEdge predicate on the "location" edge with a given conditions (other predicates).
func HasLocationWith(preds ...predicate.Location) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(LocationInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, LocationTable, LocationColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Vehicle) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Vehicle) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Vehicle) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		p(s.Not())
	})
}
