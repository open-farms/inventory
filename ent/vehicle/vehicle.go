// Code generated by entc, DO NOT EDIT.

package vehicle

import (
	"time"
)

const (
	// Label holds the string label denoting the vehicle type in the database.
	Label = "vehicle"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldMake holds the string denoting the make field in the database.
	FieldMake = "make"
	// FieldModel holds the string denoting the model field in the database.
	FieldModel = "model"
	// FieldHours holds the string denoting the hours field in the database.
	FieldHours = "hours"
	// FieldYear holds the string denoting the year field in the database.
	FieldYear = "year"
	// FieldActive holds the string denoting the active field in the database.
	FieldActive = "active"
	// FieldPower holds the string denoting the power field in the database.
	FieldPower = "power"
	// EdgeLocation holds the string denoting the location edge name in mutations.
	EdgeLocation = "location"
	// Table holds the table name of the vehicle in the database.
	Table = "vehicles"
	// LocationTable is the table that holds the location relation/edge.
	LocationTable = "vehicles"
	// LocationInverseTable is the table name for the Location entity.
	// It exists in this package in order to avoid circular dependency with the "location" package.
	LocationInverseTable = "locations"
	// LocationColumn is the table column denoting the location relation/edge.
	LocationColumn = "location_vehicle"
)

// Columns holds all SQL columns for vehicle fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldMake,
	FieldModel,
	FieldHours,
	FieldYear,
	FieldActive,
	FieldPower,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "vehicles"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"category_vehicle",
	"location_vehicle",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// DefaultHours holds the default value on creation for the "hours" field.
	DefaultHours int64
	// HoursValidator is a validator for the "hours" field. It is called by the builders before save.
	HoursValidator func(int64) error
	// YearValidator is a validator for the "year" field. It is called by the builders before save.
	YearValidator func(int64) error
	// DefaultActive holds the default value on creation for the "active" field.
	DefaultActive bool
	// DefaultPower holds the default value on creation for the "power" field.
	DefaultPower string
	// PowerValidator is a validator for the "power" field. It is called by the builders before save.
	PowerValidator func(string) error
)
