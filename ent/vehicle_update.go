// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-farms/inventory/ent/predicate"
	"github.com/open-farms/inventory/ent/vehicle"
)

// VehicleUpdate is the builder for updating Vehicle entities.
type VehicleUpdate struct {
	config
	hooks    []Hook
	mutation *VehicleMutation
}

// Where appends a list predicates to the VehicleUpdate builder.
func (vu *VehicleUpdate) Where(ps ...predicate.Vehicle) *VehicleUpdate {
	vu.mutation.Where(ps...)
	return vu
}

// SetMake sets the "make" field.
func (vu *VehicleUpdate) SetMake(s string) *VehicleUpdate {
	vu.mutation.SetMake(s)
	return vu
}

// SetNillableMake sets the "make" field if the given value is not nil.
func (vu *VehicleUpdate) SetNillableMake(s *string) *VehicleUpdate {
	if s != nil {
		vu.SetMake(*s)
	}
	return vu
}

// ClearMake clears the value of the "make" field.
func (vu *VehicleUpdate) ClearMake() *VehicleUpdate {
	vu.mutation.ClearMake()
	return vu
}

// SetModel sets the "model" field.
func (vu *VehicleUpdate) SetModel(s string) *VehicleUpdate {
	vu.mutation.SetModel(s)
	return vu
}

// SetNillableModel sets the "model" field if the given value is not nil.
func (vu *VehicleUpdate) SetNillableModel(s *string) *VehicleUpdate {
	if s != nil {
		vu.SetModel(*s)
	}
	return vu
}

// ClearModel clears the value of the "model" field.
func (vu *VehicleUpdate) ClearModel() *VehicleUpdate {
	vu.mutation.ClearModel()
	return vu
}

// SetMiles sets the "miles" field.
func (vu *VehicleUpdate) SetMiles(i int64) *VehicleUpdate {
	vu.mutation.ResetMiles()
	vu.mutation.SetMiles(i)
	return vu
}

// SetNillableMiles sets the "miles" field if the given value is not nil.
func (vu *VehicleUpdate) SetNillableMiles(i *int64) *VehicleUpdate {
	if i != nil {
		vu.SetMiles(*i)
	}
	return vu
}

// AddMiles adds i to the "miles" field.
func (vu *VehicleUpdate) AddMiles(i int64) *VehicleUpdate {
	vu.mutation.AddMiles(i)
	return vu
}

// ClearMiles clears the value of the "miles" field.
func (vu *VehicleUpdate) ClearMiles() *VehicleUpdate {
	vu.mutation.ClearMiles()
	return vu
}

// SetMpg sets the "mpg" field.
func (vu *VehicleUpdate) SetMpg(i int64) *VehicleUpdate {
	vu.mutation.ResetMpg()
	vu.mutation.SetMpg(i)
	return vu
}

// SetNillableMpg sets the "mpg" field if the given value is not nil.
func (vu *VehicleUpdate) SetNillableMpg(i *int64) *VehicleUpdate {
	if i != nil {
		vu.SetMpg(*i)
	}
	return vu
}

// AddMpg adds i to the "mpg" field.
func (vu *VehicleUpdate) AddMpg(i int64) *VehicleUpdate {
	vu.mutation.AddMpg(i)
	return vu
}

// ClearMpg clears the value of the "mpg" field.
func (vu *VehicleUpdate) ClearMpg() *VehicleUpdate {
	vu.mutation.ClearMpg()
	return vu
}

// SetOwner sets the "owner" field.
func (vu *VehicleUpdate) SetOwner(s string) *VehicleUpdate {
	vu.mutation.SetOwner(s)
	return vu
}

// SetNillableOwner sets the "owner" field if the given value is not nil.
func (vu *VehicleUpdate) SetNillableOwner(s *string) *VehicleUpdate {
	if s != nil {
		vu.SetOwner(*s)
	}
	return vu
}

// ClearOwner clears the value of the "owner" field.
func (vu *VehicleUpdate) ClearOwner() *VehicleUpdate {
	vu.mutation.ClearOwner()
	return vu
}

// SetYear sets the "year" field.
func (vu *VehicleUpdate) SetYear(s string) *VehicleUpdate {
	vu.mutation.SetYear(s)
	return vu
}

// SetNillableYear sets the "year" field if the given value is not nil.
func (vu *VehicleUpdate) SetNillableYear(s *string) *VehicleUpdate {
	if s != nil {
		vu.SetYear(*s)
	}
	return vu
}

// ClearYear clears the value of the "year" field.
func (vu *VehicleUpdate) ClearYear() *VehicleUpdate {
	vu.mutation.ClearYear()
	return vu
}

// SetActive sets the "active" field.
func (vu *VehicleUpdate) SetActive(b bool) *VehicleUpdate {
	vu.mutation.SetActive(b)
	return vu
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (vu *VehicleUpdate) SetNillableActive(b *bool) *VehicleUpdate {
	if b != nil {
		vu.SetActive(*b)
	}
	return vu
}

// ClearActive clears the value of the "active" field.
func (vu *VehicleUpdate) ClearActive() *VehicleUpdate {
	vu.mutation.ClearActive()
	return vu
}

// SetTags sets the "tags" field.
func (vu *VehicleUpdate) SetTags(s []string) *VehicleUpdate {
	vu.mutation.SetTags(s)
	return vu
}

// ClearTags clears the value of the "tags" field.
func (vu *VehicleUpdate) ClearTags() *VehicleUpdate {
	vu.mutation.ClearTags()
	return vu
}

// SetCondition sets the "condition" field.
func (vu *VehicleUpdate) SetCondition(v vehicle.Condition) *VehicleUpdate {
	vu.mutation.SetCondition(v)
	return vu
}

// SetNillableCondition sets the "condition" field if the given value is not nil.
func (vu *VehicleUpdate) SetNillableCondition(v *vehicle.Condition) *VehicleUpdate {
	if v != nil {
		vu.SetCondition(*v)
	}
	return vu
}

// ClearCondition clears the value of the "condition" field.
func (vu *VehicleUpdate) ClearCondition() *VehicleUpdate {
	vu.mutation.ClearCondition()
	return vu
}

// SetUpdateTime sets the "update_time" field.
func (vu *VehicleUpdate) SetUpdateTime(t time.Time) *VehicleUpdate {
	vu.mutation.SetUpdateTime(t)
	return vu
}

// Mutation returns the VehicleMutation object of the builder.
func (vu *VehicleUpdate) Mutation() *VehicleMutation {
	return vu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vu *VehicleUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	vu.defaults()
	if len(vu.hooks) == 0 {
		if err = vu.check(); err != nil {
			return 0, err
		}
		affected, err = vu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VehicleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = vu.check(); err != nil {
				return 0, err
			}
			vu.mutation = mutation
			affected, err = vu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(vu.hooks) - 1; i >= 0; i-- {
			if vu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = vu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (vu *VehicleUpdate) SaveX(ctx context.Context) int {
	affected, err := vu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vu *VehicleUpdate) Exec(ctx context.Context) error {
	_, err := vu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vu *VehicleUpdate) ExecX(ctx context.Context) {
	if err := vu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vu *VehicleUpdate) defaults() {
	if _, ok := vu.mutation.CreateTime(); !ok {
		v := vehicle.UpdateDefaultCreateTime()
		vu.mutation.SetCreateTime(v)
	}
	if _, ok := vu.mutation.UpdateTime(); !ok {
		v := vehicle.UpdateDefaultUpdateTime()
		vu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vu *VehicleUpdate) check() error {
	if v, ok := vu.mutation.Condition(); ok {
		if err := vehicle.ConditionValidator(v); err != nil {
			return &ValidationError{Name: "condition", err: fmt.Errorf("ent: validator failed for field \"condition\": %w", err)}
		}
	}
	return nil
}

func (vu *VehicleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   vehicle.Table,
			Columns: vehicle.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: vehicle.FieldID,
			},
		},
	}
	if ps := vu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vu.mutation.Make(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehicle.FieldMake,
		})
	}
	if vu.mutation.MakeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: vehicle.FieldMake,
		})
	}
	if value, ok := vu.mutation.Model(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehicle.FieldModel,
		})
	}
	if vu.mutation.ModelCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: vehicle.FieldModel,
		})
	}
	if value, ok := vu.mutation.Miles(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: vehicle.FieldMiles,
		})
	}
	if value, ok := vu.mutation.AddedMiles(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: vehicle.FieldMiles,
		})
	}
	if vu.mutation.MilesCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: vehicle.FieldMiles,
		})
	}
	if value, ok := vu.mutation.Mpg(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: vehicle.FieldMpg,
		})
	}
	if value, ok := vu.mutation.AddedMpg(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: vehicle.FieldMpg,
		})
	}
	if vu.mutation.MpgCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: vehicle.FieldMpg,
		})
	}
	if value, ok := vu.mutation.Owner(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehicle.FieldOwner,
		})
	}
	if vu.mutation.OwnerCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: vehicle.FieldOwner,
		})
	}
	if value, ok := vu.mutation.Year(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehicle.FieldYear,
		})
	}
	if vu.mutation.YearCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: vehicle.FieldYear,
		})
	}
	if value, ok := vu.mutation.Active(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: vehicle.FieldActive,
		})
	}
	if vu.mutation.ActiveCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: vehicle.FieldActive,
		})
	}
	if value, ok := vu.mutation.Tags(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: vehicle.FieldTags,
		})
	}
	if vu.mutation.TagsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: vehicle.FieldTags,
		})
	}
	if value, ok := vu.mutation.Condition(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: vehicle.FieldCondition,
		})
	}
	if vu.mutation.ConditionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: vehicle.FieldCondition,
		})
	}
	if value, ok := vu.mutation.CreateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: vehicle.FieldCreateTime,
		})
	}
	if value, ok := vu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: vehicle.FieldUpdateTime,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vehicle.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// VehicleUpdateOne is the builder for updating a single Vehicle entity.
type VehicleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VehicleMutation
}

// SetMake sets the "make" field.
func (vuo *VehicleUpdateOne) SetMake(s string) *VehicleUpdateOne {
	vuo.mutation.SetMake(s)
	return vuo
}

// SetNillableMake sets the "make" field if the given value is not nil.
func (vuo *VehicleUpdateOne) SetNillableMake(s *string) *VehicleUpdateOne {
	if s != nil {
		vuo.SetMake(*s)
	}
	return vuo
}

// ClearMake clears the value of the "make" field.
func (vuo *VehicleUpdateOne) ClearMake() *VehicleUpdateOne {
	vuo.mutation.ClearMake()
	return vuo
}

// SetModel sets the "model" field.
func (vuo *VehicleUpdateOne) SetModel(s string) *VehicleUpdateOne {
	vuo.mutation.SetModel(s)
	return vuo
}

// SetNillableModel sets the "model" field if the given value is not nil.
func (vuo *VehicleUpdateOne) SetNillableModel(s *string) *VehicleUpdateOne {
	if s != nil {
		vuo.SetModel(*s)
	}
	return vuo
}

// ClearModel clears the value of the "model" field.
func (vuo *VehicleUpdateOne) ClearModel() *VehicleUpdateOne {
	vuo.mutation.ClearModel()
	return vuo
}

// SetMiles sets the "miles" field.
func (vuo *VehicleUpdateOne) SetMiles(i int64) *VehicleUpdateOne {
	vuo.mutation.ResetMiles()
	vuo.mutation.SetMiles(i)
	return vuo
}

// SetNillableMiles sets the "miles" field if the given value is not nil.
func (vuo *VehicleUpdateOne) SetNillableMiles(i *int64) *VehicleUpdateOne {
	if i != nil {
		vuo.SetMiles(*i)
	}
	return vuo
}

// AddMiles adds i to the "miles" field.
func (vuo *VehicleUpdateOne) AddMiles(i int64) *VehicleUpdateOne {
	vuo.mutation.AddMiles(i)
	return vuo
}

// ClearMiles clears the value of the "miles" field.
func (vuo *VehicleUpdateOne) ClearMiles() *VehicleUpdateOne {
	vuo.mutation.ClearMiles()
	return vuo
}

// SetMpg sets the "mpg" field.
func (vuo *VehicleUpdateOne) SetMpg(i int64) *VehicleUpdateOne {
	vuo.mutation.ResetMpg()
	vuo.mutation.SetMpg(i)
	return vuo
}

// SetNillableMpg sets the "mpg" field if the given value is not nil.
func (vuo *VehicleUpdateOne) SetNillableMpg(i *int64) *VehicleUpdateOne {
	if i != nil {
		vuo.SetMpg(*i)
	}
	return vuo
}

// AddMpg adds i to the "mpg" field.
func (vuo *VehicleUpdateOne) AddMpg(i int64) *VehicleUpdateOne {
	vuo.mutation.AddMpg(i)
	return vuo
}

// ClearMpg clears the value of the "mpg" field.
func (vuo *VehicleUpdateOne) ClearMpg() *VehicleUpdateOne {
	vuo.mutation.ClearMpg()
	return vuo
}

// SetOwner sets the "owner" field.
func (vuo *VehicleUpdateOne) SetOwner(s string) *VehicleUpdateOne {
	vuo.mutation.SetOwner(s)
	return vuo
}

// SetNillableOwner sets the "owner" field if the given value is not nil.
func (vuo *VehicleUpdateOne) SetNillableOwner(s *string) *VehicleUpdateOne {
	if s != nil {
		vuo.SetOwner(*s)
	}
	return vuo
}

// ClearOwner clears the value of the "owner" field.
func (vuo *VehicleUpdateOne) ClearOwner() *VehicleUpdateOne {
	vuo.mutation.ClearOwner()
	return vuo
}

// SetYear sets the "year" field.
func (vuo *VehicleUpdateOne) SetYear(s string) *VehicleUpdateOne {
	vuo.mutation.SetYear(s)
	return vuo
}

// SetNillableYear sets the "year" field if the given value is not nil.
func (vuo *VehicleUpdateOne) SetNillableYear(s *string) *VehicleUpdateOne {
	if s != nil {
		vuo.SetYear(*s)
	}
	return vuo
}

// ClearYear clears the value of the "year" field.
func (vuo *VehicleUpdateOne) ClearYear() *VehicleUpdateOne {
	vuo.mutation.ClearYear()
	return vuo
}

// SetActive sets the "active" field.
func (vuo *VehicleUpdateOne) SetActive(b bool) *VehicleUpdateOne {
	vuo.mutation.SetActive(b)
	return vuo
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (vuo *VehicleUpdateOne) SetNillableActive(b *bool) *VehicleUpdateOne {
	if b != nil {
		vuo.SetActive(*b)
	}
	return vuo
}

// ClearActive clears the value of the "active" field.
func (vuo *VehicleUpdateOne) ClearActive() *VehicleUpdateOne {
	vuo.mutation.ClearActive()
	return vuo
}

// SetTags sets the "tags" field.
func (vuo *VehicleUpdateOne) SetTags(s []string) *VehicleUpdateOne {
	vuo.mutation.SetTags(s)
	return vuo
}

// ClearTags clears the value of the "tags" field.
func (vuo *VehicleUpdateOne) ClearTags() *VehicleUpdateOne {
	vuo.mutation.ClearTags()
	return vuo
}

// SetCondition sets the "condition" field.
func (vuo *VehicleUpdateOne) SetCondition(v vehicle.Condition) *VehicleUpdateOne {
	vuo.mutation.SetCondition(v)
	return vuo
}

// SetNillableCondition sets the "condition" field if the given value is not nil.
func (vuo *VehicleUpdateOne) SetNillableCondition(v *vehicle.Condition) *VehicleUpdateOne {
	if v != nil {
		vuo.SetCondition(*v)
	}
	return vuo
}

// ClearCondition clears the value of the "condition" field.
func (vuo *VehicleUpdateOne) ClearCondition() *VehicleUpdateOne {
	vuo.mutation.ClearCondition()
	return vuo
}

// SetUpdateTime sets the "update_time" field.
func (vuo *VehicleUpdateOne) SetUpdateTime(t time.Time) *VehicleUpdateOne {
	vuo.mutation.SetUpdateTime(t)
	return vuo
}

// Mutation returns the VehicleMutation object of the builder.
func (vuo *VehicleUpdateOne) Mutation() *VehicleMutation {
	return vuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vuo *VehicleUpdateOne) Select(field string, fields ...string) *VehicleUpdateOne {
	vuo.fields = append([]string{field}, fields...)
	return vuo
}

// Save executes the query and returns the updated Vehicle entity.
func (vuo *VehicleUpdateOne) Save(ctx context.Context) (*Vehicle, error) {
	var (
		err  error
		node *Vehicle
	)
	vuo.defaults()
	if len(vuo.hooks) == 0 {
		if err = vuo.check(); err != nil {
			return nil, err
		}
		node, err = vuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VehicleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = vuo.check(); err != nil {
				return nil, err
			}
			vuo.mutation = mutation
			node, err = vuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(vuo.hooks) - 1; i >= 0; i-- {
			if vuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = vuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (vuo *VehicleUpdateOne) SaveX(ctx context.Context) *Vehicle {
	node, err := vuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vuo *VehicleUpdateOne) Exec(ctx context.Context) error {
	_, err := vuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vuo *VehicleUpdateOne) ExecX(ctx context.Context) {
	if err := vuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vuo *VehicleUpdateOne) defaults() {
	if _, ok := vuo.mutation.CreateTime(); !ok {
		v := vehicle.UpdateDefaultCreateTime()
		vuo.mutation.SetCreateTime(v)
	}
	if _, ok := vuo.mutation.UpdateTime(); !ok {
		v := vehicle.UpdateDefaultUpdateTime()
		vuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vuo *VehicleUpdateOne) check() error {
	if v, ok := vuo.mutation.Condition(); ok {
		if err := vehicle.ConditionValidator(v); err != nil {
			return &ValidationError{Name: "condition", err: fmt.Errorf("ent: validator failed for field \"condition\": %w", err)}
		}
	}
	return nil
}

func (vuo *VehicleUpdateOne) sqlSave(ctx context.Context) (_node *Vehicle, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   vehicle.Table,
			Columns: vehicle.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: vehicle.FieldID,
			},
		},
	}
	id, ok := vuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Vehicle.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := vuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, vehicle.FieldID)
		for _, f := range fields {
			if !vehicle.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != vehicle.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vuo.mutation.Make(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehicle.FieldMake,
		})
	}
	if vuo.mutation.MakeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: vehicle.FieldMake,
		})
	}
	if value, ok := vuo.mutation.Model(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehicle.FieldModel,
		})
	}
	if vuo.mutation.ModelCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: vehicle.FieldModel,
		})
	}
	if value, ok := vuo.mutation.Miles(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: vehicle.FieldMiles,
		})
	}
	if value, ok := vuo.mutation.AddedMiles(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: vehicle.FieldMiles,
		})
	}
	if vuo.mutation.MilesCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: vehicle.FieldMiles,
		})
	}
	if value, ok := vuo.mutation.Mpg(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: vehicle.FieldMpg,
		})
	}
	if value, ok := vuo.mutation.AddedMpg(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: vehicle.FieldMpg,
		})
	}
	if vuo.mutation.MpgCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: vehicle.FieldMpg,
		})
	}
	if value, ok := vuo.mutation.Owner(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehicle.FieldOwner,
		})
	}
	if vuo.mutation.OwnerCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: vehicle.FieldOwner,
		})
	}
	if value, ok := vuo.mutation.Year(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehicle.FieldYear,
		})
	}
	if vuo.mutation.YearCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: vehicle.FieldYear,
		})
	}
	if value, ok := vuo.mutation.Active(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: vehicle.FieldActive,
		})
	}
	if vuo.mutation.ActiveCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: vehicle.FieldActive,
		})
	}
	if value, ok := vuo.mutation.Tags(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: vehicle.FieldTags,
		})
	}
	if vuo.mutation.TagsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: vehicle.FieldTags,
		})
	}
	if value, ok := vuo.mutation.Condition(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: vehicle.FieldCondition,
		})
	}
	if vuo.mutation.ConditionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: vehicle.FieldCondition,
		})
	}
	if value, ok := vuo.mutation.CreateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: vehicle.FieldCreateTime,
		})
	}
	if value, ok := vuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: vehicle.FieldUpdateTime,
		})
	}
	_node = &Vehicle{config: vuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vehicle.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
