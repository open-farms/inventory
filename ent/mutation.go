// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/open-farms/inventory/ent/category"
	"github.com/open-farms/inventory/ent/equipment"
	"github.com/open-farms/inventory/ent/implement"
	"github.com/open-farms/inventory/ent/location"
	"github.com/open-farms/inventory/ent/predicate"
	"github.com/open-farms/inventory/ent/tool"
	"github.com/open-farms/inventory/ent/vehicle"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCategory  = "Category"
	TypeEquipment = "Equipment"
	TypeImplement = "Implement"
	TypeLocation  = "Location"
	TypeTool      = "Tool"
	TypeVehicle   = "Vehicle"
)

// CategoryMutation represents an operation that mutates the Category nodes in the graph.
type CategoryMutation struct {
	config
	op               Op
	typ              string
	id               *int
	create_time      *time.Time
	update_time      *time.Time
	name             *string
	clearedFields    map[string]struct{}
	vehicle          map[int]struct{}
	removedvehicle   map[int]struct{}
	clearedvehicle   bool
	tool             map[int]struct{}
	removedtool      map[int]struct{}
	clearedtool      bool
	implement        map[int]struct{}
	removedimplement map[int]struct{}
	clearedimplement bool
	equipment        map[int]struct{}
	removedequipment map[int]struct{}
	clearedequipment bool
	location         map[int]struct{}
	removedlocation  map[int]struct{}
	clearedlocation  bool
	done             bool
	oldValue         func(context.Context) (*Category, error)
	predicates       []predicate.Category
}

var _ ent.Mutation = (*CategoryMutation)(nil)

// categoryOption allows management of the mutation configuration using functional options.
type categoryOption func(*CategoryMutation)

// newCategoryMutation creates new mutation for the Category entity.
func newCategoryMutation(c config, op Op, opts ...categoryOption) *CategoryMutation {
	m := &CategoryMutation{
		config:        c,
		op:            op,
		typ:           TypeCategory,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCategoryID sets the ID field of the mutation.
func withCategoryID(id int) categoryOption {
	return func(m *CategoryMutation) {
		var (
			err   error
			once  sync.Once
			value *Category
		)
		m.oldValue = func(ctx context.Context) (*Category, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Category.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCategory sets the old Category of the mutation.
func withCategory(node *Category) categoryOption {
	return func(m *CategoryMutation) {
		m.oldValue = func(context.Context) (*Category, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CategoryMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CategoryMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CategoryMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreateTime sets the "create_time" field.
func (m *CategoryMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *CategoryMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Category entity.
// If the Category object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CategoryMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *CategoryMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *CategoryMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *CategoryMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Category entity.
// If the Category object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CategoryMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *CategoryMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetName sets the "name" field.
func (m *CategoryMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *CategoryMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Category entity.
// If the Category object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CategoryMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *CategoryMutation) ResetName() {
	m.name = nil
}

// AddVehicleIDs adds the "vehicle" edge to the Vehicle entity by ids.
func (m *CategoryMutation) AddVehicleIDs(ids ...int) {
	if m.vehicle == nil {
		m.vehicle = make(map[int]struct{})
	}
	for i := range ids {
		m.vehicle[ids[i]] = struct{}{}
	}
}

// ClearVehicle clears the "vehicle" edge to the Vehicle entity.
func (m *CategoryMutation) ClearVehicle() {
	m.clearedvehicle = true
}

// VehicleCleared reports if the "vehicle" edge to the Vehicle entity was cleared.
func (m *CategoryMutation) VehicleCleared() bool {
	return m.clearedvehicle
}

// RemoveVehicleIDs removes the "vehicle" edge to the Vehicle entity by IDs.
func (m *CategoryMutation) RemoveVehicleIDs(ids ...int) {
	if m.removedvehicle == nil {
		m.removedvehicle = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.vehicle, ids[i])
		m.removedvehicle[ids[i]] = struct{}{}
	}
}

// RemovedVehicle returns the removed IDs of the "vehicle" edge to the Vehicle entity.
func (m *CategoryMutation) RemovedVehicleIDs() (ids []int) {
	for id := range m.removedvehicle {
		ids = append(ids, id)
	}
	return
}

// VehicleIDs returns the "vehicle" edge IDs in the mutation.
func (m *CategoryMutation) VehicleIDs() (ids []int) {
	for id := range m.vehicle {
		ids = append(ids, id)
	}
	return
}

// ResetVehicle resets all changes to the "vehicle" edge.
func (m *CategoryMutation) ResetVehicle() {
	m.vehicle = nil
	m.clearedvehicle = false
	m.removedvehicle = nil
}

// AddToolIDs adds the "tool" edge to the Tool entity by ids.
func (m *CategoryMutation) AddToolIDs(ids ...int) {
	if m.tool == nil {
		m.tool = make(map[int]struct{})
	}
	for i := range ids {
		m.tool[ids[i]] = struct{}{}
	}
}

// ClearTool clears the "tool" edge to the Tool entity.
func (m *CategoryMutation) ClearTool() {
	m.clearedtool = true
}

// ToolCleared reports if the "tool" edge to the Tool entity was cleared.
func (m *CategoryMutation) ToolCleared() bool {
	return m.clearedtool
}

// RemoveToolIDs removes the "tool" edge to the Tool entity by IDs.
func (m *CategoryMutation) RemoveToolIDs(ids ...int) {
	if m.removedtool == nil {
		m.removedtool = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.tool, ids[i])
		m.removedtool[ids[i]] = struct{}{}
	}
}

// RemovedTool returns the removed IDs of the "tool" edge to the Tool entity.
func (m *CategoryMutation) RemovedToolIDs() (ids []int) {
	for id := range m.removedtool {
		ids = append(ids, id)
	}
	return
}

// ToolIDs returns the "tool" edge IDs in the mutation.
func (m *CategoryMutation) ToolIDs() (ids []int) {
	for id := range m.tool {
		ids = append(ids, id)
	}
	return
}

// ResetTool resets all changes to the "tool" edge.
func (m *CategoryMutation) ResetTool() {
	m.tool = nil
	m.clearedtool = false
	m.removedtool = nil
}

// AddImplementIDs adds the "implement" edge to the Implement entity by ids.
func (m *CategoryMutation) AddImplementIDs(ids ...int) {
	if m.implement == nil {
		m.implement = make(map[int]struct{})
	}
	for i := range ids {
		m.implement[ids[i]] = struct{}{}
	}
}

// ClearImplement clears the "implement" edge to the Implement entity.
func (m *CategoryMutation) ClearImplement() {
	m.clearedimplement = true
}

// ImplementCleared reports if the "implement" edge to the Implement entity was cleared.
func (m *CategoryMutation) ImplementCleared() bool {
	return m.clearedimplement
}

// RemoveImplementIDs removes the "implement" edge to the Implement entity by IDs.
func (m *CategoryMutation) RemoveImplementIDs(ids ...int) {
	if m.removedimplement == nil {
		m.removedimplement = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.implement, ids[i])
		m.removedimplement[ids[i]] = struct{}{}
	}
}

// RemovedImplement returns the removed IDs of the "implement" edge to the Implement entity.
func (m *CategoryMutation) RemovedImplementIDs() (ids []int) {
	for id := range m.removedimplement {
		ids = append(ids, id)
	}
	return
}

// ImplementIDs returns the "implement" edge IDs in the mutation.
func (m *CategoryMutation) ImplementIDs() (ids []int) {
	for id := range m.implement {
		ids = append(ids, id)
	}
	return
}

// ResetImplement resets all changes to the "implement" edge.
func (m *CategoryMutation) ResetImplement() {
	m.implement = nil
	m.clearedimplement = false
	m.removedimplement = nil
}

// AddEquipmentIDs adds the "equipment" edge to the Equipment entity by ids.
func (m *CategoryMutation) AddEquipmentIDs(ids ...int) {
	if m.equipment == nil {
		m.equipment = make(map[int]struct{})
	}
	for i := range ids {
		m.equipment[ids[i]] = struct{}{}
	}
}

// ClearEquipment clears the "equipment" edge to the Equipment entity.
func (m *CategoryMutation) ClearEquipment() {
	m.clearedequipment = true
}

// EquipmentCleared reports if the "equipment" edge to the Equipment entity was cleared.
func (m *CategoryMutation) EquipmentCleared() bool {
	return m.clearedequipment
}

// RemoveEquipmentIDs removes the "equipment" edge to the Equipment entity by IDs.
func (m *CategoryMutation) RemoveEquipmentIDs(ids ...int) {
	if m.removedequipment == nil {
		m.removedequipment = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.equipment, ids[i])
		m.removedequipment[ids[i]] = struct{}{}
	}
}

// RemovedEquipment returns the removed IDs of the "equipment" edge to the Equipment entity.
func (m *CategoryMutation) RemovedEquipmentIDs() (ids []int) {
	for id := range m.removedequipment {
		ids = append(ids, id)
	}
	return
}

// EquipmentIDs returns the "equipment" edge IDs in the mutation.
func (m *CategoryMutation) EquipmentIDs() (ids []int) {
	for id := range m.equipment {
		ids = append(ids, id)
	}
	return
}

// ResetEquipment resets all changes to the "equipment" edge.
func (m *CategoryMutation) ResetEquipment() {
	m.equipment = nil
	m.clearedequipment = false
	m.removedequipment = nil
}

// AddLocationIDs adds the "location" edge to the Location entity by ids.
func (m *CategoryMutation) AddLocationIDs(ids ...int) {
	if m.location == nil {
		m.location = make(map[int]struct{})
	}
	for i := range ids {
		m.location[ids[i]] = struct{}{}
	}
}

// ClearLocation clears the "location" edge to the Location entity.
func (m *CategoryMutation) ClearLocation() {
	m.clearedlocation = true
}

// LocationCleared reports if the "location" edge to the Location entity was cleared.
func (m *CategoryMutation) LocationCleared() bool {
	return m.clearedlocation
}

// RemoveLocationIDs removes the "location" edge to the Location entity by IDs.
func (m *CategoryMutation) RemoveLocationIDs(ids ...int) {
	if m.removedlocation == nil {
		m.removedlocation = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.location, ids[i])
		m.removedlocation[ids[i]] = struct{}{}
	}
}

// RemovedLocation returns the removed IDs of the "location" edge to the Location entity.
func (m *CategoryMutation) RemovedLocationIDs() (ids []int) {
	for id := range m.removedlocation {
		ids = append(ids, id)
	}
	return
}

// LocationIDs returns the "location" edge IDs in the mutation.
func (m *CategoryMutation) LocationIDs() (ids []int) {
	for id := range m.location {
		ids = append(ids, id)
	}
	return
}

// ResetLocation resets all changes to the "location" edge.
func (m *CategoryMutation) ResetLocation() {
	m.location = nil
	m.clearedlocation = false
	m.removedlocation = nil
}

// Where appends a list predicates to the CategoryMutation builder.
func (m *CategoryMutation) Where(ps ...predicate.Category) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *CategoryMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Category).
func (m *CategoryMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CategoryMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.create_time != nil {
		fields = append(fields, category.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, category.FieldUpdateTime)
	}
	if m.name != nil {
		fields = append(fields, category.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CategoryMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case category.FieldCreateTime:
		return m.CreateTime()
	case category.FieldUpdateTime:
		return m.UpdateTime()
	case category.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CategoryMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case category.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case category.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case category.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Category field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CategoryMutation) SetField(name string, value ent.Value) error {
	switch name {
	case category.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case category.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case category.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Category field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CategoryMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CategoryMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CategoryMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Category numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CategoryMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CategoryMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CategoryMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Category nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CategoryMutation) ResetField(name string) error {
	switch name {
	case category.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case category.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case category.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Category field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CategoryMutation) AddedEdges() []string {
	edges := make([]string, 0, 5)
	if m.vehicle != nil {
		edges = append(edges, category.EdgeVehicle)
	}
	if m.tool != nil {
		edges = append(edges, category.EdgeTool)
	}
	if m.implement != nil {
		edges = append(edges, category.EdgeImplement)
	}
	if m.equipment != nil {
		edges = append(edges, category.EdgeEquipment)
	}
	if m.location != nil {
		edges = append(edges, category.EdgeLocation)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CategoryMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case category.EdgeVehicle:
		ids := make([]ent.Value, 0, len(m.vehicle))
		for id := range m.vehicle {
			ids = append(ids, id)
		}
		return ids
	case category.EdgeTool:
		ids := make([]ent.Value, 0, len(m.tool))
		for id := range m.tool {
			ids = append(ids, id)
		}
		return ids
	case category.EdgeImplement:
		ids := make([]ent.Value, 0, len(m.implement))
		for id := range m.implement {
			ids = append(ids, id)
		}
		return ids
	case category.EdgeEquipment:
		ids := make([]ent.Value, 0, len(m.equipment))
		for id := range m.equipment {
			ids = append(ids, id)
		}
		return ids
	case category.EdgeLocation:
		ids := make([]ent.Value, 0, len(m.location))
		for id := range m.location {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CategoryMutation) RemovedEdges() []string {
	edges := make([]string, 0, 5)
	if m.removedvehicle != nil {
		edges = append(edges, category.EdgeVehicle)
	}
	if m.removedtool != nil {
		edges = append(edges, category.EdgeTool)
	}
	if m.removedimplement != nil {
		edges = append(edges, category.EdgeImplement)
	}
	if m.removedequipment != nil {
		edges = append(edges, category.EdgeEquipment)
	}
	if m.removedlocation != nil {
		edges = append(edges, category.EdgeLocation)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CategoryMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case category.EdgeVehicle:
		ids := make([]ent.Value, 0, len(m.removedvehicle))
		for id := range m.removedvehicle {
			ids = append(ids, id)
		}
		return ids
	case category.EdgeTool:
		ids := make([]ent.Value, 0, len(m.removedtool))
		for id := range m.removedtool {
			ids = append(ids, id)
		}
		return ids
	case category.EdgeImplement:
		ids := make([]ent.Value, 0, len(m.removedimplement))
		for id := range m.removedimplement {
			ids = append(ids, id)
		}
		return ids
	case category.EdgeEquipment:
		ids := make([]ent.Value, 0, len(m.removedequipment))
		for id := range m.removedequipment {
			ids = append(ids, id)
		}
		return ids
	case category.EdgeLocation:
		ids := make([]ent.Value, 0, len(m.removedlocation))
		for id := range m.removedlocation {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CategoryMutation) ClearedEdges() []string {
	edges := make([]string, 0, 5)
	if m.clearedvehicle {
		edges = append(edges, category.EdgeVehicle)
	}
	if m.clearedtool {
		edges = append(edges, category.EdgeTool)
	}
	if m.clearedimplement {
		edges = append(edges, category.EdgeImplement)
	}
	if m.clearedequipment {
		edges = append(edges, category.EdgeEquipment)
	}
	if m.clearedlocation {
		edges = append(edges, category.EdgeLocation)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CategoryMutation) EdgeCleared(name string) bool {
	switch name {
	case category.EdgeVehicle:
		return m.clearedvehicle
	case category.EdgeTool:
		return m.clearedtool
	case category.EdgeImplement:
		return m.clearedimplement
	case category.EdgeEquipment:
		return m.clearedequipment
	case category.EdgeLocation:
		return m.clearedlocation
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CategoryMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Category unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CategoryMutation) ResetEdge(name string) error {
	switch name {
	case category.EdgeVehicle:
		m.ResetVehicle()
		return nil
	case category.EdgeTool:
		m.ResetTool()
		return nil
	case category.EdgeImplement:
		m.ResetImplement()
		return nil
	case category.EdgeEquipment:
		m.ResetEquipment()
		return nil
	case category.EdgeLocation:
		m.ResetLocation()
		return nil
	}
	return fmt.Errorf("unknown Category edge %s", name)
}

// EquipmentMutation represents an operation that mutates the Equipment nodes in the graph.
type EquipmentMutation struct {
	config
	op              Op
	typ             string
	id              *int
	create_time     *time.Time
	update_time     *time.Time
	name            *string
	condition       *string
	clearedFields   map[string]struct{}
	location        *int
	clearedlocation bool
	category        *int
	clearedcategory bool
	done            bool
	oldValue        func(context.Context) (*Equipment, error)
	predicates      []predicate.Equipment
}

var _ ent.Mutation = (*EquipmentMutation)(nil)

// equipmentOption allows management of the mutation configuration using functional options.
type equipmentOption func(*EquipmentMutation)

// newEquipmentMutation creates new mutation for the Equipment entity.
func newEquipmentMutation(c config, op Op, opts ...equipmentOption) *EquipmentMutation {
	m := &EquipmentMutation{
		config:        c,
		op:            op,
		typ:           TypeEquipment,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEquipmentID sets the ID field of the mutation.
func withEquipmentID(id int) equipmentOption {
	return func(m *EquipmentMutation) {
		var (
			err   error
			once  sync.Once
			value *Equipment
		)
		m.oldValue = func(ctx context.Context) (*Equipment, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Equipment.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEquipment sets the old Equipment of the mutation.
func withEquipment(node *Equipment) equipmentOption {
	return func(m *EquipmentMutation) {
		m.oldValue = func(context.Context) (*Equipment, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EquipmentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EquipmentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EquipmentMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreateTime sets the "create_time" field.
func (m *EquipmentMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *EquipmentMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Equipment entity.
// If the Equipment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EquipmentMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *EquipmentMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *EquipmentMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *EquipmentMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Equipment entity.
// If the Equipment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EquipmentMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *EquipmentMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetName sets the "name" field.
func (m *EquipmentMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *EquipmentMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Equipment entity.
// If the Equipment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EquipmentMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *EquipmentMutation) ResetName() {
	m.name = nil
}

// SetCondition sets the "condition" field.
func (m *EquipmentMutation) SetCondition(s string) {
	m.condition = &s
}

// Condition returns the value of the "condition" field in the mutation.
func (m *EquipmentMutation) Condition() (r string, exists bool) {
	v := m.condition
	if v == nil {
		return
	}
	return *v, true
}

// OldCondition returns the old "condition" field's value of the Equipment entity.
// If the Equipment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EquipmentMutation) OldCondition(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCondition is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCondition requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCondition: %w", err)
	}
	return oldValue.Condition, nil
}

// ResetCondition resets all changes to the "condition" field.
func (m *EquipmentMutation) ResetCondition() {
	m.condition = nil
}

// SetLocationID sets the "location" edge to the Location entity by id.
func (m *EquipmentMutation) SetLocationID(id int) {
	m.location = &id
}

// ClearLocation clears the "location" edge to the Location entity.
func (m *EquipmentMutation) ClearLocation() {
	m.clearedlocation = true
}

// LocationCleared reports if the "location" edge to the Location entity was cleared.
func (m *EquipmentMutation) LocationCleared() bool {
	return m.clearedlocation
}

// LocationID returns the "location" edge ID in the mutation.
func (m *EquipmentMutation) LocationID() (id int, exists bool) {
	if m.location != nil {
		return *m.location, true
	}
	return
}

// LocationIDs returns the "location" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// LocationID instead. It exists only for internal usage by the builders.
func (m *EquipmentMutation) LocationIDs() (ids []int) {
	if id := m.location; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetLocation resets all changes to the "location" edge.
func (m *EquipmentMutation) ResetLocation() {
	m.location = nil
	m.clearedlocation = false
}

// SetCategoryID sets the "category" edge to the Category entity by id.
func (m *EquipmentMutation) SetCategoryID(id int) {
	m.category = &id
}

// ClearCategory clears the "category" edge to the Category entity.
func (m *EquipmentMutation) ClearCategory() {
	m.clearedcategory = true
}

// CategoryCleared reports if the "category" edge to the Category entity was cleared.
func (m *EquipmentMutation) CategoryCleared() bool {
	return m.clearedcategory
}

// CategoryID returns the "category" edge ID in the mutation.
func (m *EquipmentMutation) CategoryID() (id int, exists bool) {
	if m.category != nil {
		return *m.category, true
	}
	return
}

// CategoryIDs returns the "category" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CategoryID instead. It exists only for internal usage by the builders.
func (m *EquipmentMutation) CategoryIDs() (ids []int) {
	if id := m.category; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCategory resets all changes to the "category" edge.
func (m *EquipmentMutation) ResetCategory() {
	m.category = nil
	m.clearedcategory = false
}

// Where appends a list predicates to the EquipmentMutation builder.
func (m *EquipmentMutation) Where(ps ...predicate.Equipment) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *EquipmentMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Equipment).
func (m *EquipmentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EquipmentMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.create_time != nil {
		fields = append(fields, equipment.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, equipment.FieldUpdateTime)
	}
	if m.name != nil {
		fields = append(fields, equipment.FieldName)
	}
	if m.condition != nil {
		fields = append(fields, equipment.FieldCondition)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EquipmentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case equipment.FieldCreateTime:
		return m.CreateTime()
	case equipment.FieldUpdateTime:
		return m.UpdateTime()
	case equipment.FieldName:
		return m.Name()
	case equipment.FieldCondition:
		return m.Condition()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EquipmentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case equipment.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case equipment.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case equipment.FieldName:
		return m.OldName(ctx)
	case equipment.FieldCondition:
		return m.OldCondition(ctx)
	}
	return nil, fmt.Errorf("unknown Equipment field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EquipmentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case equipment.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case equipment.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case equipment.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case equipment.FieldCondition:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCondition(v)
		return nil
	}
	return fmt.Errorf("unknown Equipment field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EquipmentMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EquipmentMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EquipmentMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Equipment numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EquipmentMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EquipmentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EquipmentMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Equipment nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EquipmentMutation) ResetField(name string) error {
	switch name {
	case equipment.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case equipment.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case equipment.FieldName:
		m.ResetName()
		return nil
	case equipment.FieldCondition:
		m.ResetCondition()
		return nil
	}
	return fmt.Errorf("unknown Equipment field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EquipmentMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.location != nil {
		edges = append(edges, equipment.EdgeLocation)
	}
	if m.category != nil {
		edges = append(edges, equipment.EdgeCategory)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EquipmentMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case equipment.EdgeLocation:
		if id := m.location; id != nil {
			return []ent.Value{*id}
		}
	case equipment.EdgeCategory:
		if id := m.category; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EquipmentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EquipmentMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EquipmentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedlocation {
		edges = append(edges, equipment.EdgeLocation)
	}
	if m.clearedcategory {
		edges = append(edges, equipment.EdgeCategory)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EquipmentMutation) EdgeCleared(name string) bool {
	switch name {
	case equipment.EdgeLocation:
		return m.clearedlocation
	case equipment.EdgeCategory:
		return m.clearedcategory
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EquipmentMutation) ClearEdge(name string) error {
	switch name {
	case equipment.EdgeLocation:
		m.ClearLocation()
		return nil
	case equipment.EdgeCategory:
		m.ClearCategory()
		return nil
	}
	return fmt.Errorf("unknown Equipment unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EquipmentMutation) ResetEdge(name string) error {
	switch name {
	case equipment.EdgeLocation:
		m.ResetLocation()
		return nil
	case equipment.EdgeCategory:
		m.ResetCategory()
		return nil
	}
	return fmt.Errorf("unknown Equipment edge %s", name)
}

// ImplementMutation represents an operation that mutates the Implement nodes in the graph.
type ImplementMutation struct {
	config
	op              Op
	typ             string
	id              *int
	create_time     *time.Time
	update_time     *time.Time
	name            *string
	clearedFields   map[string]struct{}
	location        *int
	clearedlocation bool
	category        *int
	clearedcategory bool
	done            bool
	oldValue        func(context.Context) (*Implement, error)
	predicates      []predicate.Implement
}

var _ ent.Mutation = (*ImplementMutation)(nil)

// implementOption allows management of the mutation configuration using functional options.
type implementOption func(*ImplementMutation)

// newImplementMutation creates new mutation for the Implement entity.
func newImplementMutation(c config, op Op, opts ...implementOption) *ImplementMutation {
	m := &ImplementMutation{
		config:        c,
		op:            op,
		typ:           TypeImplement,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withImplementID sets the ID field of the mutation.
func withImplementID(id int) implementOption {
	return func(m *ImplementMutation) {
		var (
			err   error
			once  sync.Once
			value *Implement
		)
		m.oldValue = func(ctx context.Context) (*Implement, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Implement.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withImplement sets the old Implement of the mutation.
func withImplement(node *Implement) implementOption {
	return func(m *ImplementMutation) {
		m.oldValue = func(context.Context) (*Implement, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ImplementMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ImplementMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ImplementMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreateTime sets the "create_time" field.
func (m *ImplementMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *ImplementMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Implement entity.
// If the Implement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ImplementMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *ImplementMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *ImplementMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *ImplementMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Implement entity.
// If the Implement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ImplementMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *ImplementMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetName sets the "name" field.
func (m *ImplementMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ImplementMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Implement entity.
// If the Implement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ImplementMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ImplementMutation) ResetName() {
	m.name = nil
}

// SetLocationID sets the "location" edge to the Location entity by id.
func (m *ImplementMutation) SetLocationID(id int) {
	m.location = &id
}

// ClearLocation clears the "location" edge to the Location entity.
func (m *ImplementMutation) ClearLocation() {
	m.clearedlocation = true
}

// LocationCleared reports if the "location" edge to the Location entity was cleared.
func (m *ImplementMutation) LocationCleared() bool {
	return m.clearedlocation
}

// LocationID returns the "location" edge ID in the mutation.
func (m *ImplementMutation) LocationID() (id int, exists bool) {
	if m.location != nil {
		return *m.location, true
	}
	return
}

// LocationIDs returns the "location" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// LocationID instead. It exists only for internal usage by the builders.
func (m *ImplementMutation) LocationIDs() (ids []int) {
	if id := m.location; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetLocation resets all changes to the "location" edge.
func (m *ImplementMutation) ResetLocation() {
	m.location = nil
	m.clearedlocation = false
}

// SetCategoryID sets the "category" edge to the Category entity by id.
func (m *ImplementMutation) SetCategoryID(id int) {
	m.category = &id
}

// ClearCategory clears the "category" edge to the Category entity.
func (m *ImplementMutation) ClearCategory() {
	m.clearedcategory = true
}

// CategoryCleared reports if the "category" edge to the Category entity was cleared.
func (m *ImplementMutation) CategoryCleared() bool {
	return m.clearedcategory
}

// CategoryID returns the "category" edge ID in the mutation.
func (m *ImplementMutation) CategoryID() (id int, exists bool) {
	if m.category != nil {
		return *m.category, true
	}
	return
}

// CategoryIDs returns the "category" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CategoryID instead. It exists only for internal usage by the builders.
func (m *ImplementMutation) CategoryIDs() (ids []int) {
	if id := m.category; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCategory resets all changes to the "category" edge.
func (m *ImplementMutation) ResetCategory() {
	m.category = nil
	m.clearedcategory = false
}

// Where appends a list predicates to the ImplementMutation builder.
func (m *ImplementMutation) Where(ps ...predicate.Implement) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ImplementMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Implement).
func (m *ImplementMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ImplementMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.create_time != nil {
		fields = append(fields, implement.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, implement.FieldUpdateTime)
	}
	if m.name != nil {
		fields = append(fields, implement.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ImplementMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case implement.FieldCreateTime:
		return m.CreateTime()
	case implement.FieldUpdateTime:
		return m.UpdateTime()
	case implement.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ImplementMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case implement.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case implement.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case implement.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Implement field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ImplementMutation) SetField(name string, value ent.Value) error {
	switch name {
	case implement.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case implement.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case implement.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Implement field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ImplementMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ImplementMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ImplementMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Implement numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ImplementMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ImplementMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ImplementMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Implement nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ImplementMutation) ResetField(name string) error {
	switch name {
	case implement.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case implement.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case implement.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Implement field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ImplementMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.location != nil {
		edges = append(edges, implement.EdgeLocation)
	}
	if m.category != nil {
		edges = append(edges, implement.EdgeCategory)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ImplementMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case implement.EdgeLocation:
		if id := m.location; id != nil {
			return []ent.Value{*id}
		}
	case implement.EdgeCategory:
		if id := m.category; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ImplementMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ImplementMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ImplementMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedlocation {
		edges = append(edges, implement.EdgeLocation)
	}
	if m.clearedcategory {
		edges = append(edges, implement.EdgeCategory)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ImplementMutation) EdgeCleared(name string) bool {
	switch name {
	case implement.EdgeLocation:
		return m.clearedlocation
	case implement.EdgeCategory:
		return m.clearedcategory
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ImplementMutation) ClearEdge(name string) error {
	switch name {
	case implement.EdgeLocation:
		m.ClearLocation()
		return nil
	case implement.EdgeCategory:
		m.ClearCategory()
		return nil
	}
	return fmt.Errorf("unknown Implement unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ImplementMutation) ResetEdge(name string) error {
	switch name {
	case implement.EdgeLocation:
		m.ResetLocation()
		return nil
	case implement.EdgeCategory:
		m.ResetCategory()
		return nil
	}
	return fmt.Errorf("unknown Implement edge %s", name)
}

// LocationMutation represents an operation that mutates the Location nodes in the graph.
type LocationMutation struct {
	config
	op               Op
	typ              string
	id               *int
	create_time      *time.Time
	update_time      *time.Time
	name             *string
	zone             *int32
	addzone          *int32
	clearedFields    map[string]struct{}
	vehicle          map[int]struct{}
	removedvehicle   map[int]struct{}
	clearedvehicle   bool
	tool             map[int]struct{}
	removedtool      map[int]struct{}
	clearedtool      bool
	implement        map[int]struct{}
	removedimplement map[int]struct{}
	clearedimplement bool
	equipment        map[int]struct{}
	removedequipment map[int]struct{}
	clearedequipment bool
	category         *int
	clearedcategory  bool
	done             bool
	oldValue         func(context.Context) (*Location, error)
	predicates       []predicate.Location
}

var _ ent.Mutation = (*LocationMutation)(nil)

// locationOption allows management of the mutation configuration using functional options.
type locationOption func(*LocationMutation)

// newLocationMutation creates new mutation for the Location entity.
func newLocationMutation(c config, op Op, opts ...locationOption) *LocationMutation {
	m := &LocationMutation{
		config:        c,
		op:            op,
		typ:           TypeLocation,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withLocationID sets the ID field of the mutation.
func withLocationID(id int) locationOption {
	return func(m *LocationMutation) {
		var (
			err   error
			once  sync.Once
			value *Location
		)
		m.oldValue = func(ctx context.Context) (*Location, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Location.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withLocation sets the old Location of the mutation.
func withLocation(node *Location) locationOption {
	return func(m *LocationMutation) {
		m.oldValue = func(context.Context) (*Location, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m LocationMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m LocationMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *LocationMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreateTime sets the "create_time" field.
func (m *LocationMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *LocationMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Location entity.
// If the Location object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LocationMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *LocationMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *LocationMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *LocationMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Location entity.
// If the Location object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LocationMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *LocationMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetName sets the "name" field.
func (m *LocationMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *LocationMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Location entity.
// If the Location object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LocationMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *LocationMutation) ResetName() {
	m.name = nil
}

// SetZone sets the "zone" field.
func (m *LocationMutation) SetZone(i int32) {
	m.zone = &i
	m.addzone = nil
}

// Zone returns the value of the "zone" field in the mutation.
func (m *LocationMutation) Zone() (r int32, exists bool) {
	v := m.zone
	if v == nil {
		return
	}
	return *v, true
}

// OldZone returns the old "zone" field's value of the Location entity.
// If the Location object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LocationMutation) OldZone(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldZone is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldZone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldZone: %w", err)
	}
	return oldValue.Zone, nil
}

// AddZone adds i to the "zone" field.
func (m *LocationMutation) AddZone(i int32) {
	if m.addzone != nil {
		*m.addzone += i
	} else {
		m.addzone = &i
	}
}

// AddedZone returns the value that was added to the "zone" field in this mutation.
func (m *LocationMutation) AddedZone() (r int32, exists bool) {
	v := m.addzone
	if v == nil {
		return
	}
	return *v, true
}

// ResetZone resets all changes to the "zone" field.
func (m *LocationMutation) ResetZone() {
	m.zone = nil
	m.addzone = nil
}

// AddVehicleIDs adds the "vehicle" edge to the Vehicle entity by ids.
func (m *LocationMutation) AddVehicleIDs(ids ...int) {
	if m.vehicle == nil {
		m.vehicle = make(map[int]struct{})
	}
	for i := range ids {
		m.vehicle[ids[i]] = struct{}{}
	}
}

// ClearVehicle clears the "vehicle" edge to the Vehicle entity.
func (m *LocationMutation) ClearVehicle() {
	m.clearedvehicle = true
}

// VehicleCleared reports if the "vehicle" edge to the Vehicle entity was cleared.
func (m *LocationMutation) VehicleCleared() bool {
	return m.clearedvehicle
}

// RemoveVehicleIDs removes the "vehicle" edge to the Vehicle entity by IDs.
func (m *LocationMutation) RemoveVehicleIDs(ids ...int) {
	if m.removedvehicle == nil {
		m.removedvehicle = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.vehicle, ids[i])
		m.removedvehicle[ids[i]] = struct{}{}
	}
}

// RemovedVehicle returns the removed IDs of the "vehicle" edge to the Vehicle entity.
func (m *LocationMutation) RemovedVehicleIDs() (ids []int) {
	for id := range m.removedvehicle {
		ids = append(ids, id)
	}
	return
}

// VehicleIDs returns the "vehicle" edge IDs in the mutation.
func (m *LocationMutation) VehicleIDs() (ids []int) {
	for id := range m.vehicle {
		ids = append(ids, id)
	}
	return
}

// ResetVehicle resets all changes to the "vehicle" edge.
func (m *LocationMutation) ResetVehicle() {
	m.vehicle = nil
	m.clearedvehicle = false
	m.removedvehicle = nil
}

// AddToolIDs adds the "tool" edge to the Tool entity by ids.
func (m *LocationMutation) AddToolIDs(ids ...int) {
	if m.tool == nil {
		m.tool = make(map[int]struct{})
	}
	for i := range ids {
		m.tool[ids[i]] = struct{}{}
	}
}

// ClearTool clears the "tool" edge to the Tool entity.
func (m *LocationMutation) ClearTool() {
	m.clearedtool = true
}

// ToolCleared reports if the "tool" edge to the Tool entity was cleared.
func (m *LocationMutation) ToolCleared() bool {
	return m.clearedtool
}

// RemoveToolIDs removes the "tool" edge to the Tool entity by IDs.
func (m *LocationMutation) RemoveToolIDs(ids ...int) {
	if m.removedtool == nil {
		m.removedtool = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.tool, ids[i])
		m.removedtool[ids[i]] = struct{}{}
	}
}

// RemovedTool returns the removed IDs of the "tool" edge to the Tool entity.
func (m *LocationMutation) RemovedToolIDs() (ids []int) {
	for id := range m.removedtool {
		ids = append(ids, id)
	}
	return
}

// ToolIDs returns the "tool" edge IDs in the mutation.
func (m *LocationMutation) ToolIDs() (ids []int) {
	for id := range m.tool {
		ids = append(ids, id)
	}
	return
}

// ResetTool resets all changes to the "tool" edge.
func (m *LocationMutation) ResetTool() {
	m.tool = nil
	m.clearedtool = false
	m.removedtool = nil
}

// AddImplementIDs adds the "implement" edge to the Implement entity by ids.
func (m *LocationMutation) AddImplementIDs(ids ...int) {
	if m.implement == nil {
		m.implement = make(map[int]struct{})
	}
	for i := range ids {
		m.implement[ids[i]] = struct{}{}
	}
}

// ClearImplement clears the "implement" edge to the Implement entity.
func (m *LocationMutation) ClearImplement() {
	m.clearedimplement = true
}

// ImplementCleared reports if the "implement" edge to the Implement entity was cleared.
func (m *LocationMutation) ImplementCleared() bool {
	return m.clearedimplement
}

// RemoveImplementIDs removes the "implement" edge to the Implement entity by IDs.
func (m *LocationMutation) RemoveImplementIDs(ids ...int) {
	if m.removedimplement == nil {
		m.removedimplement = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.implement, ids[i])
		m.removedimplement[ids[i]] = struct{}{}
	}
}

// RemovedImplement returns the removed IDs of the "implement" edge to the Implement entity.
func (m *LocationMutation) RemovedImplementIDs() (ids []int) {
	for id := range m.removedimplement {
		ids = append(ids, id)
	}
	return
}

// ImplementIDs returns the "implement" edge IDs in the mutation.
func (m *LocationMutation) ImplementIDs() (ids []int) {
	for id := range m.implement {
		ids = append(ids, id)
	}
	return
}

// ResetImplement resets all changes to the "implement" edge.
func (m *LocationMutation) ResetImplement() {
	m.implement = nil
	m.clearedimplement = false
	m.removedimplement = nil
}

// AddEquipmentIDs adds the "equipment" edge to the Equipment entity by ids.
func (m *LocationMutation) AddEquipmentIDs(ids ...int) {
	if m.equipment == nil {
		m.equipment = make(map[int]struct{})
	}
	for i := range ids {
		m.equipment[ids[i]] = struct{}{}
	}
}

// ClearEquipment clears the "equipment" edge to the Equipment entity.
func (m *LocationMutation) ClearEquipment() {
	m.clearedequipment = true
}

// EquipmentCleared reports if the "equipment" edge to the Equipment entity was cleared.
func (m *LocationMutation) EquipmentCleared() bool {
	return m.clearedequipment
}

// RemoveEquipmentIDs removes the "equipment" edge to the Equipment entity by IDs.
func (m *LocationMutation) RemoveEquipmentIDs(ids ...int) {
	if m.removedequipment == nil {
		m.removedequipment = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.equipment, ids[i])
		m.removedequipment[ids[i]] = struct{}{}
	}
}

// RemovedEquipment returns the removed IDs of the "equipment" edge to the Equipment entity.
func (m *LocationMutation) RemovedEquipmentIDs() (ids []int) {
	for id := range m.removedequipment {
		ids = append(ids, id)
	}
	return
}

// EquipmentIDs returns the "equipment" edge IDs in the mutation.
func (m *LocationMutation) EquipmentIDs() (ids []int) {
	for id := range m.equipment {
		ids = append(ids, id)
	}
	return
}

// ResetEquipment resets all changes to the "equipment" edge.
func (m *LocationMutation) ResetEquipment() {
	m.equipment = nil
	m.clearedequipment = false
	m.removedequipment = nil
}

// SetCategoryID sets the "category" edge to the Category entity by id.
func (m *LocationMutation) SetCategoryID(id int) {
	m.category = &id
}

// ClearCategory clears the "category" edge to the Category entity.
func (m *LocationMutation) ClearCategory() {
	m.clearedcategory = true
}

// CategoryCleared reports if the "category" edge to the Category entity was cleared.
func (m *LocationMutation) CategoryCleared() bool {
	return m.clearedcategory
}

// CategoryID returns the "category" edge ID in the mutation.
func (m *LocationMutation) CategoryID() (id int, exists bool) {
	if m.category != nil {
		return *m.category, true
	}
	return
}

// CategoryIDs returns the "category" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CategoryID instead. It exists only for internal usage by the builders.
func (m *LocationMutation) CategoryIDs() (ids []int) {
	if id := m.category; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCategory resets all changes to the "category" edge.
func (m *LocationMutation) ResetCategory() {
	m.category = nil
	m.clearedcategory = false
}

// Where appends a list predicates to the LocationMutation builder.
func (m *LocationMutation) Where(ps ...predicate.Location) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *LocationMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Location).
func (m *LocationMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *LocationMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.create_time != nil {
		fields = append(fields, location.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, location.FieldUpdateTime)
	}
	if m.name != nil {
		fields = append(fields, location.FieldName)
	}
	if m.zone != nil {
		fields = append(fields, location.FieldZone)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *LocationMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case location.FieldCreateTime:
		return m.CreateTime()
	case location.FieldUpdateTime:
		return m.UpdateTime()
	case location.FieldName:
		return m.Name()
	case location.FieldZone:
		return m.Zone()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *LocationMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case location.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case location.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case location.FieldName:
		return m.OldName(ctx)
	case location.FieldZone:
		return m.OldZone(ctx)
	}
	return nil, fmt.Errorf("unknown Location field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LocationMutation) SetField(name string, value ent.Value) error {
	switch name {
	case location.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case location.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case location.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case location.FieldZone:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetZone(v)
		return nil
	}
	return fmt.Errorf("unknown Location field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *LocationMutation) AddedFields() []string {
	var fields []string
	if m.addzone != nil {
		fields = append(fields, location.FieldZone)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *LocationMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case location.FieldZone:
		return m.AddedZone()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LocationMutation) AddField(name string, value ent.Value) error {
	switch name {
	case location.FieldZone:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddZone(v)
		return nil
	}
	return fmt.Errorf("unknown Location numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *LocationMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *LocationMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *LocationMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Location nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *LocationMutation) ResetField(name string) error {
	switch name {
	case location.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case location.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case location.FieldName:
		m.ResetName()
		return nil
	case location.FieldZone:
		m.ResetZone()
		return nil
	}
	return fmt.Errorf("unknown Location field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *LocationMutation) AddedEdges() []string {
	edges := make([]string, 0, 5)
	if m.vehicle != nil {
		edges = append(edges, location.EdgeVehicle)
	}
	if m.tool != nil {
		edges = append(edges, location.EdgeTool)
	}
	if m.implement != nil {
		edges = append(edges, location.EdgeImplement)
	}
	if m.equipment != nil {
		edges = append(edges, location.EdgeEquipment)
	}
	if m.category != nil {
		edges = append(edges, location.EdgeCategory)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *LocationMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case location.EdgeVehicle:
		ids := make([]ent.Value, 0, len(m.vehicle))
		for id := range m.vehicle {
			ids = append(ids, id)
		}
		return ids
	case location.EdgeTool:
		ids := make([]ent.Value, 0, len(m.tool))
		for id := range m.tool {
			ids = append(ids, id)
		}
		return ids
	case location.EdgeImplement:
		ids := make([]ent.Value, 0, len(m.implement))
		for id := range m.implement {
			ids = append(ids, id)
		}
		return ids
	case location.EdgeEquipment:
		ids := make([]ent.Value, 0, len(m.equipment))
		for id := range m.equipment {
			ids = append(ids, id)
		}
		return ids
	case location.EdgeCategory:
		if id := m.category; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *LocationMutation) RemovedEdges() []string {
	edges := make([]string, 0, 5)
	if m.removedvehicle != nil {
		edges = append(edges, location.EdgeVehicle)
	}
	if m.removedtool != nil {
		edges = append(edges, location.EdgeTool)
	}
	if m.removedimplement != nil {
		edges = append(edges, location.EdgeImplement)
	}
	if m.removedequipment != nil {
		edges = append(edges, location.EdgeEquipment)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *LocationMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case location.EdgeVehicle:
		ids := make([]ent.Value, 0, len(m.removedvehicle))
		for id := range m.removedvehicle {
			ids = append(ids, id)
		}
		return ids
	case location.EdgeTool:
		ids := make([]ent.Value, 0, len(m.removedtool))
		for id := range m.removedtool {
			ids = append(ids, id)
		}
		return ids
	case location.EdgeImplement:
		ids := make([]ent.Value, 0, len(m.removedimplement))
		for id := range m.removedimplement {
			ids = append(ids, id)
		}
		return ids
	case location.EdgeEquipment:
		ids := make([]ent.Value, 0, len(m.removedequipment))
		for id := range m.removedequipment {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *LocationMutation) ClearedEdges() []string {
	edges := make([]string, 0, 5)
	if m.clearedvehicle {
		edges = append(edges, location.EdgeVehicle)
	}
	if m.clearedtool {
		edges = append(edges, location.EdgeTool)
	}
	if m.clearedimplement {
		edges = append(edges, location.EdgeImplement)
	}
	if m.clearedequipment {
		edges = append(edges, location.EdgeEquipment)
	}
	if m.clearedcategory {
		edges = append(edges, location.EdgeCategory)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *LocationMutation) EdgeCleared(name string) bool {
	switch name {
	case location.EdgeVehicle:
		return m.clearedvehicle
	case location.EdgeTool:
		return m.clearedtool
	case location.EdgeImplement:
		return m.clearedimplement
	case location.EdgeEquipment:
		return m.clearedequipment
	case location.EdgeCategory:
		return m.clearedcategory
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *LocationMutation) ClearEdge(name string) error {
	switch name {
	case location.EdgeCategory:
		m.ClearCategory()
		return nil
	}
	return fmt.Errorf("unknown Location unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *LocationMutation) ResetEdge(name string) error {
	switch name {
	case location.EdgeVehicle:
		m.ResetVehicle()
		return nil
	case location.EdgeTool:
		m.ResetTool()
		return nil
	case location.EdgeImplement:
		m.ResetImplement()
		return nil
	case location.EdgeEquipment:
		m.ResetEquipment()
		return nil
	case location.EdgeCategory:
		m.ResetCategory()
		return nil
	}
	return fmt.Errorf("unknown Location edge %s", name)
}

// ToolMutation represents an operation that mutates the Tool nodes in the graph.
type ToolMutation struct {
	config
	op              Op
	typ             string
	id              *int
	create_time     *time.Time
	update_time     *time.Time
	name            *string
	powered         *bool
	clearedFields   map[string]struct{}
	location        *int
	clearedlocation bool
	category        *int
	clearedcategory bool
	done            bool
	oldValue        func(context.Context) (*Tool, error)
	predicates      []predicate.Tool
}

var _ ent.Mutation = (*ToolMutation)(nil)

// toolOption allows management of the mutation configuration using functional options.
type toolOption func(*ToolMutation)

// newToolMutation creates new mutation for the Tool entity.
func newToolMutation(c config, op Op, opts ...toolOption) *ToolMutation {
	m := &ToolMutation{
		config:        c,
		op:            op,
		typ:           TypeTool,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withToolID sets the ID field of the mutation.
func withToolID(id int) toolOption {
	return func(m *ToolMutation) {
		var (
			err   error
			once  sync.Once
			value *Tool
		)
		m.oldValue = func(ctx context.Context) (*Tool, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Tool.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTool sets the old Tool of the mutation.
func withTool(node *Tool) toolOption {
	return func(m *ToolMutation) {
		m.oldValue = func(context.Context) (*Tool, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ToolMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ToolMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ToolMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreateTime sets the "create_time" field.
func (m *ToolMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *ToolMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Tool entity.
// If the Tool object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ToolMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *ToolMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *ToolMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *ToolMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Tool entity.
// If the Tool object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ToolMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *ToolMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetName sets the "name" field.
func (m *ToolMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ToolMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Tool entity.
// If the Tool object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ToolMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ToolMutation) ResetName() {
	m.name = nil
}

// SetPowered sets the "powered" field.
func (m *ToolMutation) SetPowered(b bool) {
	m.powered = &b
}

// Powered returns the value of the "powered" field in the mutation.
func (m *ToolMutation) Powered() (r bool, exists bool) {
	v := m.powered
	if v == nil {
		return
	}
	return *v, true
}

// OldPowered returns the old "powered" field's value of the Tool entity.
// If the Tool object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ToolMutation) OldPowered(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPowered is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPowered requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPowered: %w", err)
	}
	return oldValue.Powered, nil
}

// ResetPowered resets all changes to the "powered" field.
func (m *ToolMutation) ResetPowered() {
	m.powered = nil
}

// SetLocationID sets the "location" edge to the Location entity by id.
func (m *ToolMutation) SetLocationID(id int) {
	m.location = &id
}

// ClearLocation clears the "location" edge to the Location entity.
func (m *ToolMutation) ClearLocation() {
	m.clearedlocation = true
}

// LocationCleared reports if the "location" edge to the Location entity was cleared.
func (m *ToolMutation) LocationCleared() bool {
	return m.clearedlocation
}

// LocationID returns the "location" edge ID in the mutation.
func (m *ToolMutation) LocationID() (id int, exists bool) {
	if m.location != nil {
		return *m.location, true
	}
	return
}

// LocationIDs returns the "location" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// LocationID instead. It exists only for internal usage by the builders.
func (m *ToolMutation) LocationIDs() (ids []int) {
	if id := m.location; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetLocation resets all changes to the "location" edge.
func (m *ToolMutation) ResetLocation() {
	m.location = nil
	m.clearedlocation = false
}

// SetCategoryID sets the "category" edge to the Category entity by id.
func (m *ToolMutation) SetCategoryID(id int) {
	m.category = &id
}

// ClearCategory clears the "category" edge to the Category entity.
func (m *ToolMutation) ClearCategory() {
	m.clearedcategory = true
}

// CategoryCleared reports if the "category" edge to the Category entity was cleared.
func (m *ToolMutation) CategoryCleared() bool {
	return m.clearedcategory
}

// CategoryID returns the "category" edge ID in the mutation.
func (m *ToolMutation) CategoryID() (id int, exists bool) {
	if m.category != nil {
		return *m.category, true
	}
	return
}

// CategoryIDs returns the "category" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CategoryID instead. It exists only for internal usage by the builders.
func (m *ToolMutation) CategoryIDs() (ids []int) {
	if id := m.category; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCategory resets all changes to the "category" edge.
func (m *ToolMutation) ResetCategory() {
	m.category = nil
	m.clearedcategory = false
}

// Where appends a list predicates to the ToolMutation builder.
func (m *ToolMutation) Where(ps ...predicate.Tool) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ToolMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Tool).
func (m *ToolMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ToolMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.create_time != nil {
		fields = append(fields, tool.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, tool.FieldUpdateTime)
	}
	if m.name != nil {
		fields = append(fields, tool.FieldName)
	}
	if m.powered != nil {
		fields = append(fields, tool.FieldPowered)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ToolMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case tool.FieldCreateTime:
		return m.CreateTime()
	case tool.FieldUpdateTime:
		return m.UpdateTime()
	case tool.FieldName:
		return m.Name()
	case tool.FieldPowered:
		return m.Powered()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ToolMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case tool.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case tool.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case tool.FieldName:
		return m.OldName(ctx)
	case tool.FieldPowered:
		return m.OldPowered(ctx)
	}
	return nil, fmt.Errorf("unknown Tool field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ToolMutation) SetField(name string, value ent.Value) error {
	switch name {
	case tool.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case tool.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case tool.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case tool.FieldPowered:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPowered(v)
		return nil
	}
	return fmt.Errorf("unknown Tool field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ToolMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ToolMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ToolMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Tool numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ToolMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ToolMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ToolMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Tool nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ToolMutation) ResetField(name string) error {
	switch name {
	case tool.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case tool.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case tool.FieldName:
		m.ResetName()
		return nil
	case tool.FieldPowered:
		m.ResetPowered()
		return nil
	}
	return fmt.Errorf("unknown Tool field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ToolMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.location != nil {
		edges = append(edges, tool.EdgeLocation)
	}
	if m.category != nil {
		edges = append(edges, tool.EdgeCategory)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ToolMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case tool.EdgeLocation:
		if id := m.location; id != nil {
			return []ent.Value{*id}
		}
	case tool.EdgeCategory:
		if id := m.category; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ToolMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ToolMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ToolMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedlocation {
		edges = append(edges, tool.EdgeLocation)
	}
	if m.clearedcategory {
		edges = append(edges, tool.EdgeCategory)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ToolMutation) EdgeCleared(name string) bool {
	switch name {
	case tool.EdgeLocation:
		return m.clearedlocation
	case tool.EdgeCategory:
		return m.clearedcategory
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ToolMutation) ClearEdge(name string) error {
	switch name {
	case tool.EdgeLocation:
		m.ClearLocation()
		return nil
	case tool.EdgeCategory:
		m.ClearCategory()
		return nil
	}
	return fmt.Errorf("unknown Tool unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ToolMutation) ResetEdge(name string) error {
	switch name {
	case tool.EdgeLocation:
		m.ResetLocation()
		return nil
	case tool.EdgeCategory:
		m.ResetCategory()
		return nil
	}
	return fmt.Errorf("unknown Tool edge %s", name)
}

// VehicleMutation represents an operation that mutates the Vehicle nodes in the graph.
type VehicleMutation struct {
	config
	op              Op
	typ             string
	id              *int
	create_time     *time.Time
	update_time     *time.Time
	make            *string
	model           *string
	hours           *int64
	addhours        *int64
	year            *int64
	addyear         *int64
	active          *bool
	power           *string
	clearedFields   map[string]struct{}
	location        *int
	clearedlocation bool
	done            bool
	oldValue        func(context.Context) (*Vehicle, error)
	predicates      []predicate.Vehicle
}

var _ ent.Mutation = (*VehicleMutation)(nil)

// vehicleOption allows management of the mutation configuration using functional options.
type vehicleOption func(*VehicleMutation)

// newVehicleMutation creates new mutation for the Vehicle entity.
func newVehicleMutation(c config, op Op, opts ...vehicleOption) *VehicleMutation {
	m := &VehicleMutation{
		config:        c,
		op:            op,
		typ:           TypeVehicle,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withVehicleID sets the ID field of the mutation.
func withVehicleID(id int) vehicleOption {
	return func(m *VehicleMutation) {
		var (
			err   error
			once  sync.Once
			value *Vehicle
		)
		m.oldValue = func(ctx context.Context) (*Vehicle, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Vehicle.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withVehicle sets the old Vehicle of the mutation.
func withVehicle(node *Vehicle) vehicleOption {
	return func(m *VehicleMutation) {
		m.oldValue = func(context.Context) (*Vehicle, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m VehicleMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m VehicleMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *VehicleMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreateTime sets the "create_time" field.
func (m *VehicleMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *VehicleMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Vehicle entity.
// If the Vehicle object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VehicleMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *VehicleMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *VehicleMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *VehicleMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Vehicle entity.
// If the Vehicle object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VehicleMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *VehicleMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetMake sets the "make" field.
func (m *VehicleMutation) SetMake(s string) {
	m.make = &s
}

// Make returns the value of the "make" field in the mutation.
func (m *VehicleMutation) Make() (r string, exists bool) {
	v := m.make
	if v == nil {
		return
	}
	return *v, true
}

// OldMake returns the old "make" field's value of the Vehicle entity.
// If the Vehicle object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VehicleMutation) OldMake(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldMake is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldMake requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMake: %w", err)
	}
	return oldValue.Make, nil
}

// ResetMake resets all changes to the "make" field.
func (m *VehicleMutation) ResetMake() {
	m.make = nil
}

// SetModel sets the "model" field.
func (m *VehicleMutation) SetModel(s string) {
	m.model = &s
}

// Model returns the value of the "model" field in the mutation.
func (m *VehicleMutation) Model() (r string, exists bool) {
	v := m.model
	if v == nil {
		return
	}
	return *v, true
}

// OldModel returns the old "model" field's value of the Vehicle entity.
// If the Vehicle object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VehicleMutation) OldModel(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldModel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldModel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldModel: %w", err)
	}
	return oldValue.Model, nil
}

// ResetModel resets all changes to the "model" field.
func (m *VehicleMutation) ResetModel() {
	m.model = nil
}

// SetHours sets the "hours" field.
func (m *VehicleMutation) SetHours(i int64) {
	m.hours = &i
	m.addhours = nil
}

// Hours returns the value of the "hours" field in the mutation.
func (m *VehicleMutation) Hours() (r int64, exists bool) {
	v := m.hours
	if v == nil {
		return
	}
	return *v, true
}

// OldHours returns the old "hours" field's value of the Vehicle entity.
// If the Vehicle object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VehicleMutation) OldHours(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldHours is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldHours requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHours: %w", err)
	}
	return oldValue.Hours, nil
}

// AddHours adds i to the "hours" field.
func (m *VehicleMutation) AddHours(i int64) {
	if m.addhours != nil {
		*m.addhours += i
	} else {
		m.addhours = &i
	}
}

// AddedHours returns the value that was added to the "hours" field in this mutation.
func (m *VehicleMutation) AddedHours() (r int64, exists bool) {
	v := m.addhours
	if v == nil {
		return
	}
	return *v, true
}

// ResetHours resets all changes to the "hours" field.
func (m *VehicleMutation) ResetHours() {
	m.hours = nil
	m.addhours = nil
}

// SetYear sets the "year" field.
func (m *VehicleMutation) SetYear(i int64) {
	m.year = &i
	m.addyear = nil
}

// Year returns the value of the "year" field in the mutation.
func (m *VehicleMutation) Year() (r int64, exists bool) {
	v := m.year
	if v == nil {
		return
	}
	return *v, true
}

// OldYear returns the old "year" field's value of the Vehicle entity.
// If the Vehicle object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VehicleMutation) OldYear(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldYear is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldYear requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldYear: %w", err)
	}
	return oldValue.Year, nil
}

// AddYear adds i to the "year" field.
func (m *VehicleMutation) AddYear(i int64) {
	if m.addyear != nil {
		*m.addyear += i
	} else {
		m.addyear = &i
	}
}

// AddedYear returns the value that was added to the "year" field in this mutation.
func (m *VehicleMutation) AddedYear() (r int64, exists bool) {
	v := m.addyear
	if v == nil {
		return
	}
	return *v, true
}

// ClearYear clears the value of the "year" field.
func (m *VehicleMutation) ClearYear() {
	m.year = nil
	m.addyear = nil
	m.clearedFields[vehicle.FieldYear] = struct{}{}
}

// YearCleared returns if the "year" field was cleared in this mutation.
func (m *VehicleMutation) YearCleared() bool {
	_, ok := m.clearedFields[vehicle.FieldYear]
	return ok
}

// ResetYear resets all changes to the "year" field.
func (m *VehicleMutation) ResetYear() {
	m.year = nil
	m.addyear = nil
	delete(m.clearedFields, vehicle.FieldYear)
}

// SetActive sets the "active" field.
func (m *VehicleMutation) SetActive(b bool) {
	m.active = &b
}

// Active returns the value of the "active" field in the mutation.
func (m *VehicleMutation) Active() (r bool, exists bool) {
	v := m.active
	if v == nil {
		return
	}
	return *v, true
}

// OldActive returns the old "active" field's value of the Vehicle entity.
// If the Vehicle object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VehicleMutation) OldActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActive: %w", err)
	}
	return oldValue.Active, nil
}

// ResetActive resets all changes to the "active" field.
func (m *VehicleMutation) ResetActive() {
	m.active = nil
}

// SetPower sets the "power" field.
func (m *VehicleMutation) SetPower(s string) {
	m.power = &s
}

// Power returns the value of the "power" field in the mutation.
func (m *VehicleMutation) Power() (r string, exists bool) {
	v := m.power
	if v == nil {
		return
	}
	return *v, true
}

// OldPower returns the old "power" field's value of the Vehicle entity.
// If the Vehicle object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VehicleMutation) OldPower(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPower is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPower requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPower: %w", err)
	}
	return oldValue.Power, nil
}

// ClearPower clears the value of the "power" field.
func (m *VehicleMutation) ClearPower() {
	m.power = nil
	m.clearedFields[vehicle.FieldPower] = struct{}{}
}

// PowerCleared returns if the "power" field was cleared in this mutation.
func (m *VehicleMutation) PowerCleared() bool {
	_, ok := m.clearedFields[vehicle.FieldPower]
	return ok
}

// ResetPower resets all changes to the "power" field.
func (m *VehicleMutation) ResetPower() {
	m.power = nil
	delete(m.clearedFields, vehicle.FieldPower)
}

// SetLocationID sets the "location" edge to the Location entity by id.
func (m *VehicleMutation) SetLocationID(id int) {
	m.location = &id
}

// ClearLocation clears the "location" edge to the Location entity.
func (m *VehicleMutation) ClearLocation() {
	m.clearedlocation = true
}

// LocationCleared reports if the "location" edge to the Location entity was cleared.
func (m *VehicleMutation) LocationCleared() bool {
	return m.clearedlocation
}

// LocationID returns the "location" edge ID in the mutation.
func (m *VehicleMutation) LocationID() (id int, exists bool) {
	if m.location != nil {
		return *m.location, true
	}
	return
}

// LocationIDs returns the "location" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// LocationID instead. It exists only for internal usage by the builders.
func (m *VehicleMutation) LocationIDs() (ids []int) {
	if id := m.location; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetLocation resets all changes to the "location" edge.
func (m *VehicleMutation) ResetLocation() {
	m.location = nil
	m.clearedlocation = false
}

// Where appends a list predicates to the VehicleMutation builder.
func (m *VehicleMutation) Where(ps ...predicate.Vehicle) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *VehicleMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Vehicle).
func (m *VehicleMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *VehicleMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.create_time != nil {
		fields = append(fields, vehicle.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, vehicle.FieldUpdateTime)
	}
	if m.make != nil {
		fields = append(fields, vehicle.FieldMake)
	}
	if m.model != nil {
		fields = append(fields, vehicle.FieldModel)
	}
	if m.hours != nil {
		fields = append(fields, vehicle.FieldHours)
	}
	if m.year != nil {
		fields = append(fields, vehicle.FieldYear)
	}
	if m.active != nil {
		fields = append(fields, vehicle.FieldActive)
	}
	if m.power != nil {
		fields = append(fields, vehicle.FieldPower)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *VehicleMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case vehicle.FieldCreateTime:
		return m.CreateTime()
	case vehicle.FieldUpdateTime:
		return m.UpdateTime()
	case vehicle.FieldMake:
		return m.Make()
	case vehicle.FieldModel:
		return m.Model()
	case vehicle.FieldHours:
		return m.Hours()
	case vehicle.FieldYear:
		return m.Year()
	case vehicle.FieldActive:
		return m.Active()
	case vehicle.FieldPower:
		return m.Power()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *VehicleMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case vehicle.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case vehicle.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case vehicle.FieldMake:
		return m.OldMake(ctx)
	case vehicle.FieldModel:
		return m.OldModel(ctx)
	case vehicle.FieldHours:
		return m.OldHours(ctx)
	case vehicle.FieldYear:
		return m.OldYear(ctx)
	case vehicle.FieldActive:
		return m.OldActive(ctx)
	case vehicle.FieldPower:
		return m.OldPower(ctx)
	}
	return nil, fmt.Errorf("unknown Vehicle field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VehicleMutation) SetField(name string, value ent.Value) error {
	switch name {
	case vehicle.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case vehicle.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case vehicle.FieldMake:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMake(v)
		return nil
	case vehicle.FieldModel:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetModel(v)
		return nil
	case vehicle.FieldHours:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHours(v)
		return nil
	case vehicle.FieldYear:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetYear(v)
		return nil
	case vehicle.FieldActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActive(v)
		return nil
	case vehicle.FieldPower:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPower(v)
		return nil
	}
	return fmt.Errorf("unknown Vehicle field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *VehicleMutation) AddedFields() []string {
	var fields []string
	if m.addhours != nil {
		fields = append(fields, vehicle.FieldHours)
	}
	if m.addyear != nil {
		fields = append(fields, vehicle.FieldYear)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *VehicleMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case vehicle.FieldHours:
		return m.AddedHours()
	case vehicle.FieldYear:
		return m.AddedYear()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VehicleMutation) AddField(name string, value ent.Value) error {
	switch name {
	case vehicle.FieldHours:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddHours(v)
		return nil
	case vehicle.FieldYear:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddYear(v)
		return nil
	}
	return fmt.Errorf("unknown Vehicle numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *VehicleMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(vehicle.FieldYear) {
		fields = append(fields, vehicle.FieldYear)
	}
	if m.FieldCleared(vehicle.FieldPower) {
		fields = append(fields, vehicle.FieldPower)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *VehicleMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *VehicleMutation) ClearField(name string) error {
	switch name {
	case vehicle.FieldYear:
		m.ClearYear()
		return nil
	case vehicle.FieldPower:
		m.ClearPower()
		return nil
	}
	return fmt.Errorf("unknown Vehicle nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *VehicleMutation) ResetField(name string) error {
	switch name {
	case vehicle.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case vehicle.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case vehicle.FieldMake:
		m.ResetMake()
		return nil
	case vehicle.FieldModel:
		m.ResetModel()
		return nil
	case vehicle.FieldHours:
		m.ResetHours()
		return nil
	case vehicle.FieldYear:
		m.ResetYear()
		return nil
	case vehicle.FieldActive:
		m.ResetActive()
		return nil
	case vehicle.FieldPower:
		m.ResetPower()
		return nil
	}
	return fmt.Errorf("unknown Vehicle field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *VehicleMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.location != nil {
		edges = append(edges, vehicle.EdgeLocation)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *VehicleMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case vehicle.EdgeLocation:
		if id := m.location; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *VehicleMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *VehicleMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *VehicleMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedlocation {
		edges = append(edges, vehicle.EdgeLocation)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *VehicleMutation) EdgeCleared(name string) bool {
	switch name {
	case vehicle.EdgeLocation:
		return m.clearedlocation
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *VehicleMutation) ClearEdge(name string) error {
	switch name {
	case vehicle.EdgeLocation:
		m.ClearLocation()
		return nil
	}
	return fmt.Errorf("unknown Vehicle unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *VehicleMutation) ResetEdge(name string) error {
	switch name {
	case vehicle.EdgeLocation:
		m.ResetLocation()
		return nil
	}
	return fmt.Errorf("unknown Vehicle edge %s", name)
}
