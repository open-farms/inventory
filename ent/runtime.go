// Code generated by entc, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/open-farms/inventory/ent/category"
	"github.com/open-farms/inventory/ent/equipment"
	"github.com/open-farms/inventory/ent/implement"
	"github.com/open-farms/inventory/ent/location"
	"github.com/open-farms/inventory/ent/schema"
	"github.com/open-farms/inventory/ent/tool"
	"github.com/open-farms/inventory/ent/vehicle"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	categoryMixin := schema.Category{}.Mixin()
	categoryMixinFields0 := categoryMixin[0].Fields()
	_ = categoryMixinFields0
	categoryFields := schema.Category{}.Fields()
	_ = categoryFields
	// categoryDescCreateTime is the schema descriptor for create_time field.
	categoryDescCreateTime := categoryMixinFields0[0].Descriptor()
	// category.DefaultCreateTime holds the default value on creation for the create_time field.
	category.DefaultCreateTime = categoryDescCreateTime.Default.(func() time.Time)
	// categoryDescUpdateTime is the schema descriptor for update_time field.
	categoryDescUpdateTime := categoryMixinFields0[1].Descriptor()
	// category.DefaultUpdateTime holds the default value on creation for the update_time field.
	category.DefaultUpdateTime = categoryDescUpdateTime.Default.(func() time.Time)
	// category.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	category.UpdateDefaultUpdateTime = categoryDescUpdateTime.UpdateDefault.(func() time.Time)
	equipmentMixin := schema.Equipment{}.Mixin()
	equipmentMixinFields0 := equipmentMixin[0].Fields()
	_ = equipmentMixinFields0
	equipmentFields := schema.Equipment{}.Fields()
	_ = equipmentFields
	// equipmentDescCreateTime is the schema descriptor for create_time field.
	equipmentDescCreateTime := equipmentMixinFields0[0].Descriptor()
	// equipment.DefaultCreateTime holds the default value on creation for the create_time field.
	equipment.DefaultCreateTime = equipmentDescCreateTime.Default.(func() time.Time)
	// equipmentDescUpdateTime is the schema descriptor for update_time field.
	equipmentDescUpdateTime := equipmentMixinFields0[1].Descriptor()
	// equipment.DefaultUpdateTime holds the default value on creation for the update_time field.
	equipment.DefaultUpdateTime = equipmentDescUpdateTime.Default.(func() time.Time)
	// equipment.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	equipment.UpdateDefaultUpdateTime = equipmentDescUpdateTime.UpdateDefault.(func() time.Time)
	// equipmentDescCondition is the schema descriptor for condition field.
	equipmentDescCondition := equipmentFields[1].Descriptor()
	// equipment.ConditionValidator is a validator for the "condition" field. It is called by the builders before save.
	equipment.ConditionValidator = equipmentDescCondition.Validators[0].(func(string) error)
	implementMixin := schema.Implement{}.Mixin()
	implementMixinFields0 := implementMixin[0].Fields()
	_ = implementMixinFields0
	implementFields := schema.Implement{}.Fields()
	_ = implementFields
	// implementDescCreateTime is the schema descriptor for create_time field.
	implementDescCreateTime := implementMixinFields0[0].Descriptor()
	// implement.DefaultCreateTime holds the default value on creation for the create_time field.
	implement.DefaultCreateTime = implementDescCreateTime.Default.(func() time.Time)
	// implementDescUpdateTime is the schema descriptor for update_time field.
	implementDescUpdateTime := implementMixinFields0[1].Descriptor()
	// implement.DefaultUpdateTime holds the default value on creation for the update_time field.
	implement.DefaultUpdateTime = implementDescUpdateTime.Default.(func() time.Time)
	// implement.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	implement.UpdateDefaultUpdateTime = implementDescUpdateTime.UpdateDefault.(func() time.Time)
	locationMixin := schema.Location{}.Mixin()
	locationMixinFields0 := locationMixin[0].Fields()
	_ = locationMixinFields0
	locationFields := schema.Location{}.Fields()
	_ = locationFields
	// locationDescCreateTime is the schema descriptor for create_time field.
	locationDescCreateTime := locationMixinFields0[0].Descriptor()
	// location.DefaultCreateTime holds the default value on creation for the create_time field.
	location.DefaultCreateTime = locationDescCreateTime.Default.(func() time.Time)
	// locationDescUpdateTime is the schema descriptor for update_time field.
	locationDescUpdateTime := locationMixinFields0[1].Descriptor()
	// location.DefaultUpdateTime holds the default value on creation for the update_time field.
	location.DefaultUpdateTime = locationDescUpdateTime.Default.(func() time.Time)
	// location.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	location.UpdateDefaultUpdateTime = locationDescUpdateTime.UpdateDefault.(func() time.Time)
	toolMixin := schema.Tool{}.Mixin()
	toolMixinFields0 := toolMixin[0].Fields()
	_ = toolMixinFields0
	toolFields := schema.Tool{}.Fields()
	_ = toolFields
	// toolDescCreateTime is the schema descriptor for create_time field.
	toolDescCreateTime := toolMixinFields0[0].Descriptor()
	// tool.DefaultCreateTime holds the default value on creation for the create_time field.
	tool.DefaultCreateTime = toolDescCreateTime.Default.(func() time.Time)
	// toolDescUpdateTime is the schema descriptor for update_time field.
	toolDescUpdateTime := toolMixinFields0[1].Descriptor()
	// tool.DefaultUpdateTime holds the default value on creation for the update_time field.
	tool.DefaultUpdateTime = toolDescUpdateTime.Default.(func() time.Time)
	// tool.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	tool.UpdateDefaultUpdateTime = toolDescUpdateTime.UpdateDefault.(func() time.Time)
	// toolDescPowered is the schema descriptor for powered field.
	toolDescPowered := toolFields[1].Descriptor()
	// tool.DefaultPowered holds the default value on creation for the powered field.
	tool.DefaultPowered = toolDescPowered.Default.(bool)
	vehicleMixin := schema.Vehicle{}.Mixin()
	vehicleMixinFields0 := vehicleMixin[0].Fields()
	_ = vehicleMixinFields0
	vehicleFields := schema.Vehicle{}.Fields()
	_ = vehicleFields
	// vehicleDescCreateTime is the schema descriptor for create_time field.
	vehicleDescCreateTime := vehicleMixinFields0[0].Descriptor()
	// vehicle.DefaultCreateTime holds the default value on creation for the create_time field.
	vehicle.DefaultCreateTime = vehicleDescCreateTime.Default.(func() time.Time)
	// vehicleDescUpdateTime is the schema descriptor for update_time field.
	vehicleDescUpdateTime := vehicleMixinFields0[1].Descriptor()
	// vehicle.DefaultUpdateTime holds the default value on creation for the update_time field.
	vehicle.DefaultUpdateTime = vehicleDescUpdateTime.Default.(func() time.Time)
	// vehicle.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	vehicle.UpdateDefaultUpdateTime = vehicleDescUpdateTime.UpdateDefault.(func() time.Time)
	// vehicleDescHours is the schema descriptor for hours field.
	vehicleDescHours := vehicleFields[2].Descriptor()
	// vehicle.DefaultHours holds the default value on creation for the hours field.
	vehicle.DefaultHours = vehicleDescHours.Default.(int64)
	// vehicle.HoursValidator is a validator for the "hours" field. It is called by the builders before save.
	vehicle.HoursValidator = vehicleDescHours.Validators[0].(func(int64) error)
	// vehicleDescActive is the schema descriptor for active field.
	vehicleDescActive := vehicleFields[4].Descriptor()
	// vehicle.DefaultActive holds the default value on creation for the active field.
	vehicle.DefaultActive = vehicleDescActive.Default.(bool)
	// vehicleDescPower is the schema descriptor for power field.
	vehicleDescPower := vehicleFields[5].Descriptor()
	// vehicle.DefaultPower holds the default value on creation for the power field.
	vehicle.DefaultPower = vehicleDescPower.Default.(string)
	// vehicle.PowerValidator is a validator for the "power" field. It is called by the builders before save.
	vehicle.PowerValidator = vehicleDescPower.Validators[0].(func(string) error)
}
