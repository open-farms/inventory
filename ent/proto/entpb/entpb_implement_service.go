// Code generated by protoc-gen-entgrpc. DO NOT EDIT.
package entpb

import (
	context "context"
	runtime "entgo.io/contrib/entproto/runtime"
	sqlgraph "entgo.io/ent/dialect/sql/sqlgraph"
	empty "github.com/golang/protobuf/ptypes/empty"
	ent "github.com/open-farms/inventory/ent"
	category "github.com/open-farms/inventory/ent/category"
	implement "github.com/open-farms/inventory/ent/implement"
	location "github.com/open-farms/inventory/ent/location"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// ImplementService implements ImplementServiceServer
type ImplementService struct {
	client *ent.Client
	UnimplementedImplementServiceServer
}

// NewImplementService returns a new ImplementService
func NewImplementService(client *ent.Client) *ImplementService {
	return &ImplementService{
		client: client,
	}
}

// toProtoImplement transforms the ent type to the pb type
func toProtoImplement(e *ent.Implement) (*Implement, error) {
	v := &Implement{}
	createtime := timestamppb.New(e.CreateTime)
	v.CreateTime = createtime
	id := int32(e.ID)
	v.Id = id
	name := e.Name
	v.Name = name
	updatetime := timestamppb.New(e.UpdateTime)
	v.UpdateTime = updatetime
	if edg := e.Edges.Category; edg != nil {
		id := int32(edg.ID)
		v.Category = &Category{
			Id: id,
		}
	}
	if edg := e.Edges.Location; edg != nil {
		id := int32(edg.ID)
		v.Location = &Location{
			Id: id,
		}
	}
	return v, nil
}

// Create implements ImplementServiceServer.Create
func (svc *ImplementService) Create(ctx context.Context, req *CreateImplementRequest) (*Implement, error) {
	implement := req.GetImplement()
	m := svc.client.Implement.Create()
	implementCreateTime := runtime.ExtractTime(implement.GetCreateTime())
	m.SetCreateTime(implementCreateTime)
	implementName := implement.GetName()
	m.SetName(implementName)
	implementUpdateTime := runtime.ExtractTime(implement.GetUpdateTime())
	m.SetUpdateTime(implementUpdateTime)
	implementCategory := int(implement.GetCategory().GetId())
	m.SetCategoryID(implementCategory)
	implementLocation := int(implement.GetLocation().GetId())
	m.SetLocationID(implementLocation)
	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoImplement(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Get implements ImplementServiceServer.Get
func (svc *ImplementService) Get(ctx context.Context, req *GetImplementRequest) (*Implement, error) {
	var (
		err error
		get *ent.Implement
	)
	id := int(req.GetId())
	switch req.GetView() {
	case GetImplementRequest_VIEW_UNSPECIFIED, GetImplementRequest_BASIC:
		get, err = svc.client.Implement.Get(ctx, id)
	case GetImplementRequest_WITH_EDGE_IDS:
		get, err = svc.client.Implement.Query().
			Where(implement.ID(id)).
			WithCategory(func(query *ent.CategoryQuery) {
				query.Select(category.FieldID)
			}).
			WithLocation(func(query *ent.LocationQuery) {
				query.Select(location.FieldID)
			}).
			Only(ctx)
	default:
		return nil, status.Error(codes.InvalidArgument, "invalid argument: unknown view")
	}
	switch {
	case err == nil:
		return toProtoImplement(get)
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}
	return nil, nil

}

// Update implements ImplementServiceServer.Update
func (svc *ImplementService) Update(ctx context.Context, req *UpdateImplementRequest) (*Implement, error) {
	implement := req.GetImplement()
	implementID := int(implement.GetId())
	m := svc.client.Implement.UpdateOneID(implementID)
	implementCreateTime := runtime.ExtractTime(implement.GetCreateTime())
	m.SetCreateTime(implementCreateTime)
	implementName := implement.GetName()
	m.SetName(implementName)
	implementUpdateTime := runtime.ExtractTime(implement.GetUpdateTime())
	m.SetUpdateTime(implementUpdateTime)
	implementCategory := int(implement.GetCategory().GetId())
	m.SetCategoryID(implementCategory)
	implementLocation := int(implement.GetLocation().GetId())
	m.SetLocationID(implementLocation)
	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoImplement(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Delete implements ImplementServiceServer.Delete
func (svc *ImplementService) Delete(ctx context.Context, req *DeleteImplementRequest) (*empty.Empty, error) {
	var err error
	id := int(req.GetId())
	err = svc.client.Implement.DeleteOneID(id).Exec(ctx)
	switch {
	case err == nil:
		return &emptypb.Empty{}, nil
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}
