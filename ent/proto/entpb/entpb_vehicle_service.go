// Code generated by protoc-gen-entgrpc. DO NOT EDIT.
package entpb

import (
	context "context"
	runtime "entgo.io/contrib/entproto/runtime"
	sqlgraph "entgo.io/ent/dialect/sql/sqlgraph"
	empty "github.com/golang/protobuf/ptypes/empty"
	ent "github.com/open-farms/inventory/ent"
	location "github.com/open-farms/inventory/ent/location"
	vehicle "github.com/open-farms/inventory/ent/vehicle"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// VehicleService implements VehicleServiceServer
type VehicleService struct {
	client *ent.Client
	UnimplementedVehicleServiceServer
}

// NewVehicleService returns a new VehicleService
func NewVehicleService(client *ent.Client) *VehicleService {
	return &VehicleService{
		client: client,
	}
}

// toProtoVehicle transforms the ent type to the pb type
func toProtoVehicle(e *ent.Vehicle) (*Vehicle, error) {
	v := &Vehicle{}
	active := e.Active
	v.Active = active
	createtime := timestamppb.New(e.CreateTime)
	v.CreateTime = createtime
	hours := e.Hours
	v.Hours = hours
	id := int32(e.ID)
	v.Id = id
	make := e.Make
	v.Make = make
	model := e.Model
	v.Model = model
	power := wrapperspb.String(e.Power)
	v.Power = power
	updatetime := timestamppb.New(e.UpdateTime)
	v.UpdateTime = updatetime
	year := wrapperspb.Int64(e.Year)
	v.Year = year
	if edg := e.Edges.Location; edg != nil {
		id := int32(edg.ID)
		v.Location = &Location{
			Id: id,
		}
	}
	return v, nil
}

// Create implements VehicleServiceServer.Create
func (svc *VehicleService) Create(ctx context.Context, req *CreateVehicleRequest) (*Vehicle, error) {
	vehicle := req.GetVehicle()
	m := svc.client.Vehicle.Create()
	vehicleActive := vehicle.GetActive()
	m.SetActive(vehicleActive)
	vehicleCreateTime := runtime.ExtractTime(vehicle.GetCreateTime())
	m.SetCreateTime(vehicleCreateTime)
	vehicleHours := int64(vehicle.GetHours())
	m.SetHours(vehicleHours)
	vehicleMake := vehicle.GetMake()
	m.SetMake(vehicleMake)
	vehicleModel := vehicle.GetModel()
	m.SetModel(vehicleModel)
	if vehicle.GetPower() != nil {
		vehiclePower := vehicle.GetPower().GetValue()
		m.SetPower(vehiclePower)
	}
	vehicleUpdateTime := runtime.ExtractTime(vehicle.GetUpdateTime())
	m.SetUpdateTime(vehicleUpdateTime)
	if vehicle.GetYear() != nil {
		vehicleYear := int64(vehicle.GetYear().GetValue())
		m.SetYear(vehicleYear)
	}
	vehicleLocation := int(vehicle.GetLocation().GetId())
	m.SetLocationID(vehicleLocation)
	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoVehicle(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Get implements VehicleServiceServer.Get
func (svc *VehicleService) Get(ctx context.Context, req *GetVehicleRequest) (*Vehicle, error) {
	var (
		err error
		get *ent.Vehicle
	)
	id := int(req.GetId())
	switch req.GetView() {
	case GetVehicleRequest_VIEW_UNSPECIFIED, GetVehicleRequest_BASIC:
		get, err = svc.client.Vehicle.Get(ctx, id)
	case GetVehicleRequest_WITH_EDGE_IDS:
		get, err = svc.client.Vehicle.Query().
			Where(vehicle.ID(id)).
			WithLocation(func(query *ent.LocationQuery) {
				query.Select(location.FieldID)
			}).
			Only(ctx)
	default:
		return nil, status.Error(codes.InvalidArgument, "invalid argument: unknown view")
	}
	switch {
	case err == nil:
		return toProtoVehicle(get)
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}
	return nil, nil

}

// Update implements VehicleServiceServer.Update
func (svc *VehicleService) Update(ctx context.Context, req *UpdateVehicleRequest) (*Vehicle, error) {
	vehicle := req.GetVehicle()
	vehicleID := int(vehicle.GetId())
	m := svc.client.Vehicle.UpdateOneID(vehicleID)
	vehicleActive := vehicle.GetActive()
	m.SetActive(vehicleActive)
	vehicleCreateTime := runtime.ExtractTime(vehicle.GetCreateTime())
	m.SetCreateTime(vehicleCreateTime)
	vehicleHours := int64(vehicle.GetHours())
	m.SetHours(vehicleHours)
	vehicleMake := vehicle.GetMake()
	m.SetMake(vehicleMake)
	vehicleModel := vehicle.GetModel()
	m.SetModel(vehicleModel)
	if vehicle.GetPower() != nil {
		vehiclePower := vehicle.GetPower().GetValue()
		m.SetPower(vehiclePower)
	}
	vehicleUpdateTime := runtime.ExtractTime(vehicle.GetUpdateTime())
	m.SetUpdateTime(vehicleUpdateTime)
	if vehicle.GetYear() != nil {
		vehicleYear := int64(vehicle.GetYear().GetValue())
		m.SetYear(vehicleYear)
	}
	vehicleLocation := int(vehicle.GetLocation().GetId())
	m.SetLocationID(vehicleLocation)
	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoVehicle(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Delete implements VehicleServiceServer.Delete
func (svc *VehicleService) Delete(ctx context.Context, req *DeleteVehicleRequest) (*empty.Empty, error) {
	var err error
	id := int(req.GetId())
	err = svc.client.Vehicle.DeleteOneID(id).Exec(ctx)
	switch {
	case err == nil:
		return &emptypb.Empty{}, nil
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}
