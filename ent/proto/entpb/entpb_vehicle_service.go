// Code generated by protoc-gen-entgrpc. DO NOT EDIT.
package entpb

import (
	context "context"
	runtime "entgo.io/contrib/entproto/runtime"
	sqlgraph "entgo.io/ent/dialect/sql/sqlgraph"
	ent "github.com/open-farms/inventory/ent"
	vehicle "github.com/open-farms/inventory/ent/vehicle"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// VehicleService implements VehicleServiceServer
type VehicleService struct {
	client *ent.Client
	UnimplementedVehicleServiceServer
}

// NewVehicleService returns a new VehicleService
func NewVehicleService(client *ent.Client) *VehicleService {
	return &VehicleService{
		client: client,
	}
}

// toProtoVehicle transforms the ent type to the pb type
func toProtoVehicle(e *ent.Vehicle) (*Vehicle, error) {
	v := &Vehicle{}
	active := wrapperspb.Bool(e.Active)
	v.Active = active
	condition := wrapperspb.String(e.Condition)
	v.Condition = condition
	createtime := timestamppb.New(e.CreateTime)
	v.CreateTime = createtime
	id := int32(e.ID)
	v.Id = id
	make := e.Make
	v.Make = make
	miles := wrapperspb.Int64(e.Miles)
	v.Miles = miles
	model := e.Model
	v.Model = model
	mpg := wrapperspb.Int64(e.Mpg)
	v.Mpg = mpg
	owner := wrapperspb.String(e.Owner)
	v.Owner = owner
	updatetime := timestamppb.New(e.UpdateTime)
	v.UpdateTime = updatetime
	year := wrapperspb.String(e.Year)
	v.Year = year
	return v, nil
}

// Create implements VehicleServiceServer.Create
func (svc *VehicleService) Create(ctx context.Context, req *CreateVehicleRequest) (*Vehicle, error) {
	vehicle := req.GetVehicle()
	m := svc.client.Vehicle.Create()
	if vehicle.GetActive() != nil {
		vehicleActive := vehicle.GetActive().GetValue()
		m.SetActive(vehicleActive)
	}
	if vehicle.GetCondition() != nil {
		vehicleCondition := vehicle.GetCondition().GetValue()
		m.SetCondition(vehicleCondition)
	}
	vehicleCreateTime := runtime.ExtractTime(vehicle.GetCreateTime())
	m.SetCreateTime(vehicleCreateTime)
	vehicleMake := vehicle.GetMake()
	m.SetMake(vehicleMake)
	if vehicle.GetMiles() != nil {
		vehicleMiles := int64(vehicle.GetMiles().GetValue())
		m.SetMiles(vehicleMiles)
	}
	vehicleModel := vehicle.GetModel()
	m.SetModel(vehicleModel)
	if vehicle.GetMpg() != nil {
		vehicleMpg := int64(vehicle.GetMpg().GetValue())
		m.SetMpg(vehicleMpg)
	}
	if vehicle.GetOwner() != nil {
		vehicleOwner := vehicle.GetOwner().GetValue()
		m.SetOwner(vehicleOwner)
	}
	vehicleUpdateTime := runtime.ExtractTime(vehicle.GetUpdateTime())
	m.SetUpdateTime(vehicleUpdateTime)
	if vehicle.GetYear() != nil {
		vehicleYear := vehicle.GetYear().GetValue()
		m.SetYear(vehicleYear)
	}
	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoVehicle(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Get implements VehicleServiceServer.Get
func (svc *VehicleService) Get(ctx context.Context, req *GetVehicleRequest) (*Vehicle, error) {
	var (
		err error
		get *ent.Vehicle
	)
	id := int(req.GetId())
	switch req.GetView() {
	case GetVehicleRequest_VIEW_UNSPECIFIED, GetVehicleRequest_BASIC:
		get, err = svc.client.Vehicle.Get(ctx, id)
	case GetVehicleRequest_WITH_EDGE_IDS:
		get, err = svc.client.Vehicle.Query().
			Where(vehicle.ID(id)).
			Only(ctx)
	default:
		return nil, status.Error(codes.InvalidArgument, "invalid argument: unknown view")
	}
	switch {
	case err == nil:
		return toProtoVehicle(get)
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}
	return nil, nil

}

// Update implements VehicleServiceServer.Update
func (svc *VehicleService) Update(ctx context.Context, req *UpdateVehicleRequest) (*Vehicle, error) {
	vehicle := req.GetVehicle()
	vehicleID := int(vehicle.GetId())
	m := svc.client.Vehicle.UpdateOneID(vehicleID)
	if vehicle.GetActive() != nil {
		vehicleActive := vehicle.GetActive().GetValue()
		m.SetActive(vehicleActive)
	}
	if vehicle.GetCondition() != nil {
		vehicleCondition := vehicle.GetCondition().GetValue()
		m.SetCondition(vehicleCondition)
	}
	vehicleCreateTime := runtime.ExtractTime(vehicle.GetCreateTime())
	m.SetCreateTime(vehicleCreateTime)
	vehicleMake := vehicle.GetMake()
	m.SetMake(vehicleMake)
	if vehicle.GetMiles() != nil {
		vehicleMiles := int64(vehicle.GetMiles().GetValue())
		m.SetMiles(vehicleMiles)
	}
	vehicleModel := vehicle.GetModel()
	m.SetModel(vehicleModel)
	if vehicle.GetMpg() != nil {
		vehicleMpg := int64(vehicle.GetMpg().GetValue())
		m.SetMpg(vehicleMpg)
	}
	if vehicle.GetOwner() != nil {
		vehicleOwner := vehicle.GetOwner().GetValue()
		m.SetOwner(vehicleOwner)
	}
	vehicleUpdateTime := runtime.ExtractTime(vehicle.GetUpdateTime())
	m.SetUpdateTime(vehicleUpdateTime)
	if vehicle.GetYear() != nil {
		vehicleYear := vehicle.GetYear().GetValue()
		m.SetYear(vehicleYear)
	}
	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoVehicle(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Delete implements VehicleServiceServer.Delete
func (svc *VehicleService) Delete(ctx context.Context, req *DeleteVehicleRequest) (*emptypb.Empty, error) {
	var err error
	id := int(req.GetId())
	err = svc.client.Vehicle.DeleteOneID(id).Exec(ctx)
	switch {
	case err == nil:
		return &emptypb.Empty{}, nil
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}
