// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package entpb

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EquipmentServiceClient is the client API for EquipmentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EquipmentServiceClient interface {
	Create(ctx context.Context, in *CreateEquipmentRequest, opts ...grpc.CallOption) (*Equipment, error)
	Get(ctx context.Context, in *GetEquipmentRequest, opts ...grpc.CallOption) (*Equipment, error)
	Update(ctx context.Context, in *UpdateEquipmentRequest, opts ...grpc.CallOption) (*Equipment, error)
	Delete(ctx context.Context, in *DeleteEquipmentRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type equipmentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEquipmentServiceClient(cc grpc.ClientConnInterface) EquipmentServiceClient {
	return &equipmentServiceClient{cc}
}

func (c *equipmentServiceClient) Create(ctx context.Context, in *CreateEquipmentRequest, opts ...grpc.CallOption) (*Equipment, error) {
	out := new(Equipment)
	err := c.cc.Invoke(ctx, "/entpb.EquipmentService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equipmentServiceClient) Get(ctx context.Context, in *GetEquipmentRequest, opts ...grpc.CallOption) (*Equipment, error) {
	out := new(Equipment)
	err := c.cc.Invoke(ctx, "/entpb.EquipmentService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equipmentServiceClient) Update(ctx context.Context, in *UpdateEquipmentRequest, opts ...grpc.CallOption) (*Equipment, error) {
	out := new(Equipment)
	err := c.cc.Invoke(ctx, "/entpb.EquipmentService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equipmentServiceClient) Delete(ctx context.Context, in *DeleteEquipmentRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/entpb.EquipmentService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EquipmentServiceServer is the server API for EquipmentService service.
// All implementations must embed UnimplementedEquipmentServiceServer
// for forward compatibility
type EquipmentServiceServer interface {
	Create(context.Context, *CreateEquipmentRequest) (*Equipment, error)
	Get(context.Context, *GetEquipmentRequest) (*Equipment, error)
	Update(context.Context, *UpdateEquipmentRequest) (*Equipment, error)
	Delete(context.Context, *DeleteEquipmentRequest) (*empty.Empty, error)
	mustEmbedUnimplementedEquipmentServiceServer()
}

// UnimplementedEquipmentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEquipmentServiceServer struct {
}

func (UnimplementedEquipmentServiceServer) Create(context.Context, *CreateEquipmentRequest) (*Equipment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedEquipmentServiceServer) Get(context.Context, *GetEquipmentRequest) (*Equipment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedEquipmentServiceServer) Update(context.Context, *UpdateEquipmentRequest) (*Equipment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedEquipmentServiceServer) Delete(context.Context, *DeleteEquipmentRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedEquipmentServiceServer) mustEmbedUnimplementedEquipmentServiceServer() {}

// UnsafeEquipmentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EquipmentServiceServer will
// result in compilation errors.
type UnsafeEquipmentServiceServer interface {
	mustEmbedUnimplementedEquipmentServiceServer()
}

func RegisterEquipmentServiceServer(s grpc.ServiceRegistrar, srv EquipmentServiceServer) {
	s.RegisterService(&EquipmentService_ServiceDesc, srv)
}

func _EquipmentService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEquipmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EquipmentServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.EquipmentService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EquipmentServiceServer).Create(ctx, req.(*CreateEquipmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EquipmentService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEquipmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EquipmentServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.EquipmentService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EquipmentServiceServer).Get(ctx, req.(*GetEquipmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EquipmentService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEquipmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EquipmentServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.EquipmentService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EquipmentServiceServer).Update(ctx, req.(*UpdateEquipmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EquipmentService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEquipmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EquipmentServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.EquipmentService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EquipmentServiceServer).Delete(ctx, req.(*DeleteEquipmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EquipmentService_ServiceDesc is the grpc.ServiceDesc for EquipmentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EquipmentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "entpb.EquipmentService",
	HandlerType: (*EquipmentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _EquipmentService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _EquipmentService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _EquipmentService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _EquipmentService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "entpb/entpb.proto",
}

// ImplementServiceClient is the client API for ImplementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImplementServiceClient interface {
	Create(ctx context.Context, in *CreateImplementRequest, opts ...grpc.CallOption) (*Implement, error)
	Get(ctx context.Context, in *GetImplementRequest, opts ...grpc.CallOption) (*Implement, error)
	Update(ctx context.Context, in *UpdateImplementRequest, opts ...grpc.CallOption) (*Implement, error)
	Delete(ctx context.Context, in *DeleteImplementRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type implementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewImplementServiceClient(cc grpc.ClientConnInterface) ImplementServiceClient {
	return &implementServiceClient{cc}
}

func (c *implementServiceClient) Create(ctx context.Context, in *CreateImplementRequest, opts ...grpc.CallOption) (*Implement, error) {
	out := new(Implement)
	err := c.cc.Invoke(ctx, "/entpb.ImplementService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *implementServiceClient) Get(ctx context.Context, in *GetImplementRequest, opts ...grpc.CallOption) (*Implement, error) {
	out := new(Implement)
	err := c.cc.Invoke(ctx, "/entpb.ImplementService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *implementServiceClient) Update(ctx context.Context, in *UpdateImplementRequest, opts ...grpc.CallOption) (*Implement, error) {
	out := new(Implement)
	err := c.cc.Invoke(ctx, "/entpb.ImplementService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *implementServiceClient) Delete(ctx context.Context, in *DeleteImplementRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/entpb.ImplementService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImplementServiceServer is the server API for ImplementService service.
// All implementations must embed UnimplementedImplementServiceServer
// for forward compatibility
type ImplementServiceServer interface {
	Create(context.Context, *CreateImplementRequest) (*Implement, error)
	Get(context.Context, *GetImplementRequest) (*Implement, error)
	Update(context.Context, *UpdateImplementRequest) (*Implement, error)
	Delete(context.Context, *DeleteImplementRequest) (*empty.Empty, error)
	mustEmbedUnimplementedImplementServiceServer()
}

// UnimplementedImplementServiceServer must be embedded to have forward compatible implementations.
type UnimplementedImplementServiceServer struct {
}

func (UnimplementedImplementServiceServer) Create(context.Context, *CreateImplementRequest) (*Implement, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedImplementServiceServer) Get(context.Context, *GetImplementRequest) (*Implement, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedImplementServiceServer) Update(context.Context, *UpdateImplementRequest) (*Implement, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedImplementServiceServer) Delete(context.Context, *DeleteImplementRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedImplementServiceServer) mustEmbedUnimplementedImplementServiceServer() {}

// UnsafeImplementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImplementServiceServer will
// result in compilation errors.
type UnsafeImplementServiceServer interface {
	mustEmbedUnimplementedImplementServiceServer()
}

func RegisterImplementServiceServer(s grpc.ServiceRegistrar, srv ImplementServiceServer) {
	s.RegisterService(&ImplementService_ServiceDesc, srv)
}

func _ImplementService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateImplementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImplementServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.ImplementService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImplementServiceServer).Create(ctx, req.(*CreateImplementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImplementService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetImplementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImplementServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.ImplementService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImplementServiceServer).Get(ctx, req.(*GetImplementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImplementService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateImplementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImplementServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.ImplementService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImplementServiceServer).Update(ctx, req.(*UpdateImplementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImplementService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteImplementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImplementServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.ImplementService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImplementServiceServer).Delete(ctx, req.(*DeleteImplementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ImplementService_ServiceDesc is the grpc.ServiceDesc for ImplementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImplementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "entpb.ImplementService",
	HandlerType: (*ImplementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ImplementService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ImplementService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ImplementService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ImplementService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "entpb/entpb.proto",
}

// ToolServiceClient is the client API for ToolService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ToolServiceClient interface {
	Create(ctx context.Context, in *CreateToolRequest, opts ...grpc.CallOption) (*Tool, error)
	Get(ctx context.Context, in *GetToolRequest, opts ...grpc.CallOption) (*Tool, error)
	Update(ctx context.Context, in *UpdateToolRequest, opts ...grpc.CallOption) (*Tool, error)
	Delete(ctx context.Context, in *DeleteToolRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type toolServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewToolServiceClient(cc grpc.ClientConnInterface) ToolServiceClient {
	return &toolServiceClient{cc}
}

func (c *toolServiceClient) Create(ctx context.Context, in *CreateToolRequest, opts ...grpc.CallOption) (*Tool, error) {
	out := new(Tool)
	err := c.cc.Invoke(ctx, "/entpb.ToolService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toolServiceClient) Get(ctx context.Context, in *GetToolRequest, opts ...grpc.CallOption) (*Tool, error) {
	out := new(Tool)
	err := c.cc.Invoke(ctx, "/entpb.ToolService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toolServiceClient) Update(ctx context.Context, in *UpdateToolRequest, opts ...grpc.CallOption) (*Tool, error) {
	out := new(Tool)
	err := c.cc.Invoke(ctx, "/entpb.ToolService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toolServiceClient) Delete(ctx context.Context, in *DeleteToolRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/entpb.ToolService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ToolServiceServer is the server API for ToolService service.
// All implementations must embed UnimplementedToolServiceServer
// for forward compatibility
type ToolServiceServer interface {
	Create(context.Context, *CreateToolRequest) (*Tool, error)
	Get(context.Context, *GetToolRequest) (*Tool, error)
	Update(context.Context, *UpdateToolRequest) (*Tool, error)
	Delete(context.Context, *DeleteToolRequest) (*empty.Empty, error)
	mustEmbedUnimplementedToolServiceServer()
}

// UnimplementedToolServiceServer must be embedded to have forward compatible implementations.
type UnimplementedToolServiceServer struct {
}

func (UnimplementedToolServiceServer) Create(context.Context, *CreateToolRequest) (*Tool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedToolServiceServer) Get(context.Context, *GetToolRequest) (*Tool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedToolServiceServer) Update(context.Context, *UpdateToolRequest) (*Tool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedToolServiceServer) Delete(context.Context, *DeleteToolRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedToolServiceServer) mustEmbedUnimplementedToolServiceServer() {}

// UnsafeToolServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ToolServiceServer will
// result in compilation errors.
type UnsafeToolServiceServer interface {
	mustEmbedUnimplementedToolServiceServer()
}

func RegisterToolServiceServer(s grpc.ServiceRegistrar, srv ToolServiceServer) {
	s.RegisterService(&ToolService_ServiceDesc, srv)
}

func _ToolService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateToolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToolServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.ToolService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToolServiceServer).Create(ctx, req.(*CreateToolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToolService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetToolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToolServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.ToolService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToolServiceServer).Get(ctx, req.(*GetToolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToolService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateToolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToolServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.ToolService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToolServiceServer).Update(ctx, req.(*UpdateToolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToolService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteToolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToolServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.ToolService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToolServiceServer).Delete(ctx, req.(*DeleteToolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ToolService_ServiceDesc is the grpc.ServiceDesc for ToolService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ToolService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "entpb.ToolService",
	HandlerType: (*ToolServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ToolService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ToolService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ToolService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ToolService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "entpb/entpb.proto",
}

// VehicleServiceClient is the client API for VehicleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VehicleServiceClient interface {
	Create(ctx context.Context, in *CreateVehicleRequest, opts ...grpc.CallOption) (*Vehicle, error)
	Get(ctx context.Context, in *GetVehicleRequest, opts ...grpc.CallOption) (*Vehicle, error)
	Update(ctx context.Context, in *UpdateVehicleRequest, opts ...grpc.CallOption) (*Vehicle, error)
	Delete(ctx context.Context, in *DeleteVehicleRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type vehicleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVehicleServiceClient(cc grpc.ClientConnInterface) VehicleServiceClient {
	return &vehicleServiceClient{cc}
}

func (c *vehicleServiceClient) Create(ctx context.Context, in *CreateVehicleRequest, opts ...grpc.CallOption) (*Vehicle, error) {
	out := new(Vehicle)
	err := c.cc.Invoke(ctx, "/entpb.VehicleService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vehicleServiceClient) Get(ctx context.Context, in *GetVehicleRequest, opts ...grpc.CallOption) (*Vehicle, error) {
	out := new(Vehicle)
	err := c.cc.Invoke(ctx, "/entpb.VehicleService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vehicleServiceClient) Update(ctx context.Context, in *UpdateVehicleRequest, opts ...grpc.CallOption) (*Vehicle, error) {
	out := new(Vehicle)
	err := c.cc.Invoke(ctx, "/entpb.VehicleService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vehicleServiceClient) Delete(ctx context.Context, in *DeleteVehicleRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/entpb.VehicleService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VehicleServiceServer is the server API for VehicleService service.
// All implementations must embed UnimplementedVehicleServiceServer
// for forward compatibility
type VehicleServiceServer interface {
	Create(context.Context, *CreateVehicleRequest) (*Vehicle, error)
	Get(context.Context, *GetVehicleRequest) (*Vehicle, error)
	Update(context.Context, *UpdateVehicleRequest) (*Vehicle, error)
	Delete(context.Context, *DeleteVehicleRequest) (*empty.Empty, error)
	mustEmbedUnimplementedVehicleServiceServer()
}

// UnimplementedVehicleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVehicleServiceServer struct {
}

func (UnimplementedVehicleServiceServer) Create(context.Context, *CreateVehicleRequest) (*Vehicle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedVehicleServiceServer) Get(context.Context, *GetVehicleRequest) (*Vehicle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedVehicleServiceServer) Update(context.Context, *UpdateVehicleRequest) (*Vehicle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedVehicleServiceServer) Delete(context.Context, *DeleteVehicleRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedVehicleServiceServer) mustEmbedUnimplementedVehicleServiceServer() {}

// UnsafeVehicleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VehicleServiceServer will
// result in compilation errors.
type UnsafeVehicleServiceServer interface {
	mustEmbedUnimplementedVehicleServiceServer()
}

func RegisterVehicleServiceServer(s grpc.ServiceRegistrar, srv VehicleServiceServer) {
	s.RegisterService(&VehicleService_ServiceDesc, srv)
}

func _VehicleService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVehicleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VehicleServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.VehicleService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VehicleServiceServer).Create(ctx, req.(*CreateVehicleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VehicleService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVehicleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VehicleServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.VehicleService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VehicleServiceServer).Get(ctx, req.(*GetVehicleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VehicleService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVehicleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VehicleServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.VehicleService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VehicleServiceServer).Update(ctx, req.(*UpdateVehicleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VehicleService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVehicleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VehicleServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.VehicleService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VehicleServiceServer).Delete(ctx, req.(*DeleteVehicleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VehicleService_ServiceDesc is the grpc.ServiceDesc for VehicleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VehicleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "entpb.VehicleService",
	HandlerType: (*VehicleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _VehicleService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _VehicleService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _VehicleService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _VehicleService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "entpb/entpb.proto",
}
