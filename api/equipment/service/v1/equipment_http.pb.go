// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.0

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type EquipmentServiceHTTPServer interface {
	CreateEquipment(context.Context, *CreateEquipmentRequest) (*CreateEquipmentResponse, error)
	DeleteEquipment(context.Context, *DeleteEquipmentRequest) (*DeleteEquipmentResponse, error)
	GetEquipment(context.Context, *GetEquipmentRequest) (*GetEquipmentResponse, error)
	ListEquipment(context.Context, *ListEquipmentRequest) (*ListEquipmentResponse, error)
	UpdateEquipment(context.Context, *UpdateEquipmentRequest) (*UpdateEquipmentResponse, error)
}

func RegisterEquipmentServiceHTTPServer(s *http.Server, srv EquipmentServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/equipment", _EquipmentService_CreateEquipment0_HTTP_Handler(srv))
	r.PUT("/v1/equipment/{id}", _EquipmentService_UpdateEquipment0_HTTP_Handler(srv))
	r.DELETE("/v1/equipment/{id}", _EquipmentService_DeleteEquipment0_HTTP_Handler(srv))
	r.GET("/v1/equipment/{id}", _EquipmentService_GetEquipment0_HTTP_Handler(srv))
	r.GET("/v1/equipment", _EquipmentService_ListEquipment0_HTTP_Handler(srv))
}

func _EquipmentService_CreateEquipment0_HTTP_Handler(srv EquipmentServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateEquipmentRequest
		if err := ctx.Bind(&in.Equipment); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.equipment.service.v1.EquipmentService/CreateEquipment")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateEquipment(ctx, req.(*CreateEquipmentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateEquipmentResponse)
		return ctx.Result(200, reply)
	}
}

func _EquipmentService_UpdateEquipment0_HTTP_Handler(srv EquipmentServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateEquipmentRequest
		if err := ctx.Bind(&in.Equipment); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.equipment.service.v1.EquipmentService/UpdateEquipment")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateEquipment(ctx, req.(*UpdateEquipmentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateEquipmentResponse)
		return ctx.Result(200, reply)
	}
}

func _EquipmentService_DeleteEquipment0_HTTP_Handler(srv EquipmentServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteEquipmentRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.equipment.service.v1.EquipmentService/DeleteEquipment")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteEquipment(ctx, req.(*DeleteEquipmentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteEquipmentResponse)
		return ctx.Result(200, reply)
	}
}

func _EquipmentService_GetEquipment0_HTTP_Handler(srv EquipmentServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetEquipmentRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.equipment.service.v1.EquipmentService/GetEquipment")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetEquipment(ctx, req.(*GetEquipmentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetEquipmentResponse)
		return ctx.Result(200, reply)
	}
}

func _EquipmentService_ListEquipment0_HTTP_Handler(srv EquipmentServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListEquipmentRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.equipment.service.v1.EquipmentService/ListEquipment")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListEquipment(ctx, req.(*ListEquipmentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListEquipmentResponse)
		return ctx.Result(200, reply)
	}
}

type EquipmentServiceHTTPClient interface {
	CreateEquipment(ctx context.Context, req *CreateEquipmentRequest, opts ...http.CallOption) (rsp *CreateEquipmentResponse, err error)
	DeleteEquipment(ctx context.Context, req *DeleteEquipmentRequest, opts ...http.CallOption) (rsp *DeleteEquipmentResponse, err error)
	GetEquipment(ctx context.Context, req *GetEquipmentRequest, opts ...http.CallOption) (rsp *GetEquipmentResponse, err error)
	ListEquipment(ctx context.Context, req *ListEquipmentRequest, opts ...http.CallOption) (rsp *ListEquipmentResponse, err error)
	UpdateEquipment(ctx context.Context, req *UpdateEquipmentRequest, opts ...http.CallOption) (rsp *UpdateEquipmentResponse, err error)
}

type EquipmentServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewEquipmentServiceHTTPClient(client *http.Client) EquipmentServiceHTTPClient {
	return &EquipmentServiceHTTPClientImpl{client}
}

func (c *EquipmentServiceHTTPClientImpl) CreateEquipment(ctx context.Context, in *CreateEquipmentRequest, opts ...http.CallOption) (*CreateEquipmentResponse, error) {
	var out CreateEquipmentResponse
	pattern := "/v1/equipment"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.equipment.service.v1.EquipmentService/CreateEquipment"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.Equipment, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *EquipmentServiceHTTPClientImpl) DeleteEquipment(ctx context.Context, in *DeleteEquipmentRequest, opts ...http.CallOption) (*DeleteEquipmentResponse, error) {
	var out DeleteEquipmentResponse
	pattern := "/v1/equipment/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.equipment.service.v1.EquipmentService/DeleteEquipment"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *EquipmentServiceHTTPClientImpl) GetEquipment(ctx context.Context, in *GetEquipmentRequest, opts ...http.CallOption) (*GetEquipmentResponse, error) {
	var out GetEquipmentResponse
	pattern := "/v1/equipment/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.equipment.service.v1.EquipmentService/GetEquipment"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *EquipmentServiceHTTPClientImpl) ListEquipment(ctx context.Context, in *ListEquipmentRequest, opts ...http.CallOption) (*ListEquipmentResponse, error) {
	var out ListEquipmentResponse
	pattern := "/v1/equipment"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.equipment.service.v1.EquipmentService/ListEquipment"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *EquipmentServiceHTTPClientImpl) UpdateEquipment(ctx context.Context, in *UpdateEquipmentRequest, opts ...http.CallOption) (*UpdateEquipmentResponse, error) {
	var out UpdateEquipmentResponse
	pattern := "/v1/equipment/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.equipment.service.v1.EquipmentService/UpdateEquipment"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in.Equipment, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
